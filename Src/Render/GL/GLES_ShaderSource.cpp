/**************************************************************************

    PublicHeader:   Render
    Filename    :   GLES_ShaderSource.cpp
    Content     :   GLES Shader descriptors
    Created     :   1/29/2015
    Authors     :   Automatically generated.

    Copyright   :   Copyright 2015 Autodesk, Inc. All Rights reserved.

    Use of this software is subject to the terms of the Autodesk license
    agreement provided at the time of installation or download, or which
    otherwise accompanies this software in either electronic or hard copy form.

**************************************************************************/


namespace Scaleform { namespace Render { namespace GL {


extern const char* pSource_GLES100_NDL_VTexTG;
const char* pSource_GLES100_NDL_VTexTG = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTG;
const char* pSource_GLES100_NDL_FTexTG = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGTexDensity;
const char* pSource_GLES100_NDL_VTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexDensity;
const char* pSource_GLES100_NDL_FTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGMul;
const char* pSource_GLES100_NDL_FTexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGInv;
const char* pSource_GLES100_NDL_FTexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGEAlpha;
const char* pSource_GLES100_NDL_VTexTGEAlpha = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGEAlpha;
const char* pSource_GLES100_NDL_FTexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGCxform;
const char* pSource_GLES100_NDL_VTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxform;
const char* pSource_GLES100_NDL_FTexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformMul;
const char* pSource_GLES100_NDL_FTexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformInv;
const char* pSource_GLES100_NDL_FTexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VTexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FTexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGCxformAc;
const char* pSource_GLES100_NDL_VTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAc;
const char* pSource_GLES100_NDL_FTexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAcMul;
const char* pSource_GLES100_NDL_FTexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAcInv;
const char* pSource_GLES100_NDL_FTexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VTexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FTexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTG;
const char* pSource_GLES100_NDL_FATexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGTexDensity;
const char* pSource_GLES100_NDL_FATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGMul;
const char* pSource_GLES100_NDL_FATexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGInv;
const char* pSource_GLES100_NDL_FATexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGEAlpha;
const char* pSource_GLES100_NDL_FATexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VATexTGCxform;
const char* pSource_GLES100_NDL_VATexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxform;
const char* pSource_GLES100_NDL_FATexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformMul;
const char* pSource_GLES100_NDL_FATexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformInv;
const char* pSource_GLES100_NDL_FATexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VATexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FATexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VATexTGCxformAc;
const char* pSource_GLES100_NDL_VATexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAc;
const char* pSource_GLES100_NDL_FATexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAcMul;
const char* pSource_GLES100_NDL_FATexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAcInv;
const char* pSource_GLES100_NDL_FATexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VATexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FATexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertex;
const char* pSource_GLES100_NDL_VVertex = 
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertex;
const char* pSource_GLES100_NDL_FVertex = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexMul;
const char* pSource_GLES100_NDL_FVertexMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexInv;
const char* pSource_GLES100_NDL_FVertexInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertexEAlpha;
const char* pSource_GLES100_NDL_VVertexEAlpha = 
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexEAlpha;
const char* pSource_GLES100_NDL_FVertexEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexEAlphaMul;
const char* pSource_GLES100_NDL_FVertexEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexEAlphaInv;
const char* pSource_GLES100_NDL_FVertexEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertexCxform;
const char* pSource_GLES100_NDL_VVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxform;
const char* pSource_GLES100_NDL_FVertexCxform = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformMul;
const char* pSource_GLES100_NDL_FVertexCxformMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformInv;
const char* pSource_GLES100_NDL_FVertexCxformInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VVertexCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FVertexCxformEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FVertexCxformEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FVertexCxformEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertexCxformAc;
const char* pSource_GLES100_NDL_VVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAc;
const char* pSource_GLES100_NDL_FVertexCxformAc = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAcMul;
const char* pSource_GLES100_NDL_FVertexCxformAcMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAcInv;
const char* pSource_GLES100_NDL_FVertexCxformAcInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VVertexCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FVertexCxformAcEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGTexTG;
const char* pSource_GLES100_NDL_VTexTGTexTG = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTG;
const char* pSource_GLES100_NDL_FTexTGTexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_FTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGMul;
const char* pSource_GLES100_NDL_FTexTGTexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGInv;
const char* pSource_GLES100_NDL_FTexTGTexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGEAlpha;
const char* pSource_GLES100_NDL_FTexTGTexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGTexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VTexTGTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxform;
const char* pSource_GLES100_NDL_FTexTGTexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformMul;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformInv;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VTexTGTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcMul;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcInv;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGTexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTG;
const char* pSource_GLES100_NDL_FATexTGATexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGTexDensity;
const char* pSource_GLES100_NDL_FATexTGATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGMul;
const char* pSource_GLES100_NDL_FATexTGATexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGInv;
const char* pSource_GLES100_NDL_FATexTGATexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGEAlpha;
const char* pSource_GLES100_NDL_FATexTGATexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGATexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxform;
const char* pSource_GLES100_NDL_FATexTGATexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformMul;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformInv;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAc;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcMul;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcInv;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGATexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGVertex;
const char* pSource_GLES100_NDL_VTexTGVertex = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertex;
const char* pSource_GLES100_NDL_FTexTGVertex = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_FTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexMul;
const char* pSource_GLES100_NDL_FTexTGVertexMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexInv;
const char* pSource_GLES100_NDL_FTexTGVertexInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexEAlpha;
const char* pSource_GLES100_NDL_FTexTGVertexEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexEAlphaTexDensity;
const char* pSource_GLES100_NDL_FTexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGVertexEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGVertexEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGVertexCxform;
const char* pSource_GLES100_NDL_VTexTGVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxform;
const char* pSource_GLES100_NDL_FTexTGVertexCxform = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformMul;
const char* pSource_GLES100_NDL_FTexTGVertexCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformInv;
const char* pSource_GLES100_NDL_FTexTGVertexCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGVertexCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VTexTGVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAcMul;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAcInv;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FTexTGVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertex;
const char* pSource_GLES100_NDL_FATexTGVertex = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexTexDensity;
const char* pSource_GLES100_NDL_FATexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexMul;
const char* pSource_GLES100_NDL_FATexTGVertexMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexInv;
const char* pSource_GLES100_NDL_FATexTGVertexInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexEAlpha;
const char* pSource_GLES100_NDL_FATexTGVertexEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexEAlphaTexDensity;
const char* pSource_GLES100_NDL_FATexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGVertexEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGVertexEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxform;
const char* pSource_GLES100_NDL_FATexTGVertexCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformMul;
const char* pSource_GLES100_NDL_FATexTGVertexCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformInv;
const char* pSource_GLES100_NDL_FATexTGVertexCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGVertexCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAc;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAcMul;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAcInv;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FATexTGVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTG;
const char* pSource_GLES100_NDL_VPosition3dTexTG = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGEAlpha;
const char* pSource_GLES100_NDL_VPosition3dTexTGEAlpha = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGCxform;
const char* pSource_GLES100_NDL_VPosition3dTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VPosition3dTexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGCxformAc;
const char* pSource_GLES100_NDL_VPosition3dTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VPosition3dTexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dATexTGCxform;
const char* pSource_GLES100_NDL_VPosition3dATexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VPosition3dATexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dATexTGCxformAc;
const char* pSource_GLES100_NDL_VPosition3dATexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VPosition3dATexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertex;
const char* pSource_GLES100_NDL_VPosition3dVertex = 
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertexEAlpha;
const char* pSource_GLES100_NDL_VPosition3dVertexEAlpha = 
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertexCxform;
const char* pSource_GLES100_NDL_VPosition3dVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VPosition3dVertexCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertexCxformAc;
const char* pSource_GLES100_NDL_VPosition3dVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VPosition3dVertexCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGTexTG;
const char* pSource_GLES100_NDL_VPosition3dTexTGTexTG = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VPosition3dTexTGTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGVertex;
const char* pSource_GLES100_NDL_VPosition3dTexTGVertex = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGVertexCxform;
const char* pSource_GLES100_NDL_VPosition3dTexTGVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VPosition3dTexTGVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTG;
const char* pSource_GLES100_NDL_VBatchTexTG = 
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGTexDensity;
const char* pSource_GLES100_NDL_VBatchTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGEAlpha;
const char* pSource_GLES100_NDL_VBatchTexTGEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VBatchTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGCxform;
const char* pSource_GLES100_NDL_VBatchTexTGCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchTexTGCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchTexTGCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchTexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchATexTGCxform;
const char* pSource_GLES100_NDL_VBatchATexTGCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchATexTGCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchATexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchATexTGCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchATexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertex;
const char* pSource_GLES100_NDL_VBatchVertex = 
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertexEAlpha;
const char* pSource_GLES100_NDL_VBatchVertexEAlpha = 
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertexCxform;
const char* pSource_GLES100_NDL_VBatchVertexCxform = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchVertexCxformEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertexCxformAc;
const char* pSource_GLES100_NDL_VBatchVertexCxformAc = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchVertexCxformAcEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGTexTG;
const char* pSource_GLES100_NDL_VBatchTexTGTexTG = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VBatchTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VBatchTexTGTexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchTexTGTexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGVertex;
const char* pSource_GLES100_NDL_VBatchTexTGVertex = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VBatchTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGVertexCxform;
const char* pSource_GLES100_NDL_VBatchTexTGVertexCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VBatchTexTGVertexCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTG;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTG = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dATexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertex;
const char* pSource_GLES100_NDL_VBatchPosition3dVertex = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertexEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dVertexEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformAc;
const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VBatchPosition3dVertexCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTG;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTG = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGCxform = 
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGTexTGCxformAc = 
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertex;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertex = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VBatchPosition3dTexTGVertexCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTG;
const char* pSource_GLES100_NDL_VInstancedTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTG;
const char* pSource_GLES100_NDL_FInstancedTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGTexDensity;
const char* pSource_GLES100_NDL_VInstancedTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGMul;
const char* pSource_GLES100_NDL_FInstancedTexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGInv;
const char* pSource_GLES100_NDL_FInstancedTexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGEAlpha;
const char* pSource_GLES100_NDL_VInstancedTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VInstancedTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGCxform;
const char* pSource_GLES100_NDL_VInstancedTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxform;
const char* pSource_GLES100_NDL_FInstancedTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformMul;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformInv;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAc;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTG;
const char* pSource_GLES100_NDL_FInstancedATexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGMul;
const char* pSource_GLES100_NDL_FInstancedATexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGInv;
const char* pSource_GLES100_NDL_FInstancedATexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedATexTGCxform;
const char* pSource_GLES100_NDL_VInstancedATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxform;
const char* pSource_GLES100_NDL_FInstancedATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformMul;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformInv;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedATexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAc;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertex;
const char* pSource_GLES100_NDL_VInstancedVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertex;
const char* pSource_GLES100_NDL_FInstancedVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexMul;
const char* pSource_GLES100_NDL_FInstancedVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexInv;
const char* pSource_GLES100_NDL_FInstancedVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertexEAlpha;
const char* pSource_GLES100_NDL_VInstancedVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexEAlpha;
const char* pSource_GLES100_NDL_FInstancedVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertexCxform;
const char* pSource_GLES100_NDL_VInstancedVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxform;
const char* pSource_GLES100_NDL_FInstancedVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformMul;
const char* pSource_GLES100_NDL_FInstancedVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformInv;
const char* pSource_GLES100_NDL_FInstancedVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertexCxformAc;
const char* pSource_GLES100_NDL_VInstancedVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAc;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGTexTG;
const char* pSource_GLES100_NDL_VInstancedTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTG;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VInstancedTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VInstancedTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxform;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGTexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTG;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxform;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAc;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGATexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGVertex;
const char* pSource_GLES100_NDL_VInstancedTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertex;
const char* pSource_GLES100_NDL_FInstancedTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VInstancedTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGVertexCxform;
const char* pSource_GLES100_NDL_VInstancedTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxform;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VInstancedTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedTexTGVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertex;
const char* pSource_GLES100_NDL_FInstancedATexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxform;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAc;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedATexTGVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTG;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertex;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertexEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformAc;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES100_NDL_VInstancedPosition3dVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTG;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertex;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexCxformAc;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VSolid;
const char* pSource_GLES100_NDL_VSolid = 
"uniform vec4 mvp[2];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSolid;
const char* pSource_GLES100_NDL_FSolid = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSolidMul;
const char* pSource_GLES100_NDL_FSolidMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSolidInv;
const char* pSource_GLES100_NDL_FSolidInv = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VText;
const char* pSource_GLES100_NDL_VText = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FText;
const char* pSource_GLES100_NDL_FText = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTextTexDensity;
const char* pSource_GLES100_NDL_VTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTextTexDensity;
const char* pSource_GLES100_NDL_FTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTextMul;
const char* pSource_GLES100_NDL_FTextMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTextInv;
const char* pSource_GLES100_NDL_FTextInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexUV;
const char* pSource_GLES100_NDL_VTexUV = 
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexUVTexDensity;
const char* pSource_GLES100_NDL_VTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VTexUVCxform;
const char* pSource_GLES100_NDL_VTexUVCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUV;
const char* pSource_GLES100_NDL_FATexUV = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVTexDensity;
const char* pSource_GLES100_NDL_FATexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVMul;
const char* pSource_GLES100_NDL_FATexUVMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVInv;
const char* pSource_GLES100_NDL_FATexUVInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVCxform;
const char* pSource_GLES100_NDL_FATexUVCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVCxformMul;
const char* pSource_GLES100_NDL_FATexUVCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FATexUVCxformInv;
const char* pSource_GLES100_NDL_FATexUVCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dSolid;
const char* pSource_GLES100_NDL_VPosition3dSolid = 
"uniform vec4 mvp[4];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dText;
const char* pSource_GLES100_NDL_VPosition3dText = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTextTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexUV;
const char* pSource_GLES100_NDL_VPosition3dTexUV = 
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexUVTexDensity;
const char* pSource_GLES100_NDL_VPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VPosition3dTexUVCxform;
const char* pSource_GLES100_NDL_VPosition3dTexUVCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchSolid;
const char* pSource_GLES100_NDL_VBatchSolid = 
"uniform vec4 vfuniforms[48];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchText;
const char* pSource_GLES100_NDL_VBatchText = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTextTexDensity;
const char* pSource_GLES100_NDL_VBatchTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexUV;
const char* pSource_GLES100_NDL_VBatchTexUV = 
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexUVTexDensity;
const char* pSource_GLES100_NDL_VBatchTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchTexUVCxform;
const char* pSource_GLES100_NDL_VBatchTexUVCxform = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dSolid;
const char* pSource_GLES100_NDL_VBatchPosition3dSolid = 
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dText;
const char* pSource_GLES100_NDL_VBatchPosition3dText = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTextTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexUV;
const char* pSource_GLES100_NDL_VBatchPosition3dTexUV = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexUVTexDensity;
const char* pSource_GLES100_NDL_VBatchPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBatchPosition3dTexUVCxform;
const char* pSource_GLES100_NDL_VBatchPosition3dTexUVCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedSolid;
const char* pSource_GLES100_NDL_VInstancedSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedSolid;
const char* pSource_GLES100_NDL_FInstancedSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedSolidMul;
const char* pSource_GLES100_NDL_FInstancedSolidMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedSolidInv;
const char* pSource_GLES100_NDL_FInstancedSolidInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedText;
const char* pSource_GLES100_NDL_VInstancedText = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedText;
const char* pSource_GLES100_NDL_FInstancedText = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTextTexDensity;
const char* pSource_GLES100_NDL_VInstancedTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTextTexDensity;
const char* pSource_GLES100_NDL_FInstancedTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTextMul;
const char* pSource_GLES100_NDL_FInstancedTextMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedTextInv;
const char* pSource_GLES100_NDL_FInstancedTextInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexUV;
const char* pSource_GLES100_NDL_VInstancedTexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexUVTexDensity;
const char* pSource_GLES100_NDL_VInstancedTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedTexUVCxform;
const char* pSource_GLES100_NDL_VInstancedTexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUV;
const char* pSource_GLES100_NDL_FInstancedATexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVTexDensity;
const char* pSource_GLES100_NDL_FInstancedATexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVMul;
const char* pSource_GLES100_NDL_FInstancedATexUVMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVInv;
const char* pSource_GLES100_NDL_FInstancedATexUVInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVCxform;
const char* pSource_GLES100_NDL_FInstancedATexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVCxformMul;
const char* pSource_GLES100_NDL_FInstancedATexUVCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedATexUVCxformInv;
const char* pSource_GLES100_NDL_FInstancedATexUVCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dSolid;
const char* pSource_GLES100_NDL_VInstancedPosition3dSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dText;
const char* pSource_GLES100_NDL_VInstancedPosition3dText = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTextTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexUV;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexUVTexDensity;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VInstancedPosition3dTexUVCxform;
const char* pSource_GLES100_NDL_VInstancedPosition3dTexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUV;
const char* pSource_GLES100_NDL_FYUV = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVTexDensity;
const char* pSource_GLES100_NDL_FYUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVMul;
const char* pSource_GLES100_NDL_FYUVMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVEAlpha;
const char* pSource_GLES100_NDL_FYUVEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVEAlphaTexDensity;
const char* pSource_GLES100_NDL_FYUVEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVEAlphaMul;
const char* pSource_GLES100_NDL_FYUVEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxform;
const char* pSource_GLES100_NDL_FYUVCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformMul;
const char* pSource_GLES100_NDL_FYUVCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformEAlpha;
const char* pSource_GLES100_NDL_FYUVCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformEAlphaMul;
const char* pSource_GLES100_NDL_FYUVCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformAc;
const char* pSource_GLES100_NDL_FYUVCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformAcMul;
const char* pSource_GLES100_NDL_FYUVCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformAcEAlpha;
const char* pSource_GLES100_NDL_FYUVCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FYUVCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVA;
const char* pSource_GLES100_NDL_FYUVA = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVATexDensity;
const char* pSource_GLES100_NDL_FYUVATexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAMul;
const char* pSource_GLES100_NDL_FYUVAMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAInv;
const char* pSource_GLES100_NDL_FYUVAInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAEAlpha;
const char* pSource_GLES100_NDL_FYUVAEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAEAlphaTexDensity;
const char* pSource_GLES100_NDL_FYUVAEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAEAlphaMul;
const char* pSource_GLES100_NDL_FYUVAEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVAEAlphaInv;
const char* pSource_GLES100_NDL_FYUVAEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxform;
const char* pSource_GLES100_NDL_FYUVACxform = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformMul;
const char* pSource_GLES100_NDL_FYUVACxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformInv;
const char* pSource_GLES100_NDL_FYUVACxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformEAlpha;
const char* pSource_GLES100_NDL_FYUVACxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformEAlphaMul;
const char* pSource_GLES100_NDL_FYUVACxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformEAlphaInv;
const char* pSource_GLES100_NDL_FYUVACxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAc;
const char* pSource_GLES100_NDL_FYUVACxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAcMul;
const char* pSource_GLES100_NDL_FYUVACxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAcInv;
const char* pSource_GLES100_NDL_FYUVACxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAcEAlpha;
const char* pSource_GLES100_NDL_FYUVACxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FYUVACxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FYUVACxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FYUVACxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUV;
const char* pSource_GLES100_NDL_FInstancedYUV = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVTexDensity;
const char* pSource_GLES100_NDL_FInstancedYUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVMul;
const char* pSource_GLES100_NDL_FInstancedYUVMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedYUVEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxform;
const char* pSource_GLES100_NDL_FInstancedYUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformMul;
const char* pSource_GLES100_NDL_FInstancedYUVCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformAc;
const char* pSource_GLES100_NDL_FInstancedYUVCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformAcMul;
const char* pSource_GLES100_NDL_FInstancedYUVCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVCxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVA;
const char* pSource_GLES100_NDL_FInstancedYUVA = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVATexDensity;
const char* pSource_GLES100_NDL_FInstancedYUVATexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAMul;
const char* pSource_GLES100_NDL_FInstancedYUVAMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAInv;
const char* pSource_GLES100_NDL_FInstancedYUVAInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVAEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaTexDensity;
const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedYUVAEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxform;
const char* pSource_GLES100_NDL_FInstancedYUVACxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformMul;
const char* pSource_GLES100_NDL_FInstancedYUVACxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformInv;
const char* pSource_GLES100_NDL_FInstancedYUVACxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedYUVACxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAc;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAcMul;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAcInv;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlpha;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlphaMul;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlphaInv;
const char* pSource_GLES100_NDL_FInstancedYUVACxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCMatrixAc;
const char* pSource_GLES100_NDL_FTexTGCMatrixAc = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCMatrixAcMul;
const char* pSource_GLES100_NDL_FTexTGCMatrixAcMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCMatrixAcEAlpha;
const char* pSource_GLES100_NDL_FTexTGCMatrixAcEAlpha = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FTexTGCMatrixAcEAlphaMul;
const char* pSource_GLES100_NDL_FTexTGCMatrixAcEAlphaMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBox1Blur;
const char* pSource_GLES100_NDL_FBox1Blur = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBox1BlurMul;
const char* pSource_GLES100_NDL_FBox1BlurMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBox2Blur;
const char* pSource_GLES100_NDL_FBox2Blur = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBox2BlurMul;
const char* pSource_GLES100_NDL_FBox2BlurMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorOuterBevel;
const char* pSource_GLES100_NDL_FSColorOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorOuterBevelMul;
const char* pSource_GLES100_NDL_FSColorOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorInnerShadow;
const char* pSource_GLES100_NDL_FSColorInnerShadow = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorInnerShadowMul;
const char* pSource_GLES100_NDL_FSColorInnerShadowMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorFullBevel;
const char* pSource_GLES100_NDL_FSColorFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorFullBevelMul;
const char* pSource_GLES100_NDL_FSColorFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseOuterBevel;
const char* pSource_GLES100_NDL_FSColorHideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseOuterBevelMul;
const char* pSource_GLES100_NDL_FSColorHideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseInnerShadow;
const char* pSource_GLES100_NDL_FSColorHideBaseInnerShadow = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseInnerShadowMul;
const char* pSource_GLES100_NDL_FSColorHideBaseInnerShadowMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseFullBevel;
const char* pSource_GLES100_NDL_FSColorHideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColorHideBaseFullBevelMul;
const char* pSource_GLES100_NDL_FSColorHideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradOuterBevel;
const char* pSource_GLES100_NDL_FSGradOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradOuterBevelMul;
const char* pSource_GLES100_NDL_FSGradOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradInnerBevel;
const char* pSource_GLES100_NDL_FSGradInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradInnerBevelMul;
const char* pSource_GLES100_NDL_FSGradInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradFullBevel;
const char* pSource_GLES100_NDL_FSGradFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradFullBevelMul;
const char* pSource_GLES100_NDL_FSGradFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseOuterBevel;
const char* pSource_GLES100_NDL_FSGradHideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseOuterBevelMul;
const char* pSource_GLES100_NDL_FSGradHideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseInnerBevel;
const char* pSource_GLES100_NDL_FSGradHideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseInnerBevelMul;
const char* pSource_GLES100_NDL_FSGradHideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseFullBevel;
const char* pSource_GLES100_NDL_FSGradHideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGradHideBaseFullBevelMul;
const char* pSource_GLES100_NDL_FSGradHideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2OuterBevel;
const char* pSource_GLES100_NDL_FSColor2OuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2OuterBevelMul;
const char* pSource_GLES100_NDL_FSColor2OuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2InnerBevel;
const char* pSource_GLES100_NDL_FSColor2InnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2InnerBevelMul;
const char* pSource_GLES100_NDL_FSColor2InnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2FullBevel;
const char* pSource_GLES100_NDL_FSColor2FullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2FullBevelMul;
const char* pSource_GLES100_NDL_FSColor2FullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseOuterBevel;
const char* pSource_GLES100_NDL_FSColor2HideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseOuterBevelMul;
const char* pSource_GLES100_NDL_FSColor2HideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseInnerBevel;
const char* pSource_GLES100_NDL_FSColor2HideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseInnerBevelMul;
const char* pSource_GLES100_NDL_FSColor2HideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseFullBevel;
const char* pSource_GLES100_NDL_FSColor2HideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSColor2HideBaseFullBevelMul;
const char* pSource_GLES100_NDL_FSColor2HideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2OuterBevel;
const char* pSource_GLES100_NDL_FSGrad2OuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2OuterBevelMul;
const char* pSource_GLES100_NDL_FSGrad2OuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2InnerBevel;
const char* pSource_GLES100_NDL_FSGrad2InnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2InnerBevelMul;
const char* pSource_GLES100_NDL_FSGrad2InnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2FullBevel;
const char* pSource_GLES100_NDL_FSGrad2FullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2FullBevelMul;
const char* pSource_GLES100_NDL_FSGrad2FullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseOuterBevel;
const char* pSource_GLES100_NDL_FSGrad2HideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseOuterBevelMul;
const char* pSource_GLES100_NDL_FSGrad2HideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseInnerBevel;
const char* pSource_GLES100_NDL_FSGrad2HideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseInnerBevelMul;
const char* pSource_GLES100_NDL_FSGrad2HideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseFullBevel;
const char* pSource_GLES100_NDL_FSGrad2HideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FSGrad2HideBaseFullBevelMul;
const char* pSource_GLES100_NDL_FSGrad2HideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -%fsize.x%; ix <= %fsize.x%; ix++)\n"
"{\n"
"for (float iy = -%fsize.y%; iy <= %fsize.y%; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDisplacementMap;
const char* pSource_GLES100_NDL_FDisplacementMap = 
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDisplacementMapDMIgnore;
const char* pSource_GLES100_NDL_FDisplacementMapDMIgnore = 
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + texture2D(tex, tc0) * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDisplacementMapDMColor;
const char* pSource_GLES100_NDL_FDisplacementMapDMColor = 
"precision mediump float;\n"
"uniform vec4 boundColor;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + boundColor * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VDrawableCopyPixels;
const char* pSource_GLES100_NDL_VDrawableCopyPixels = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixels;
const char* pSource_GLES100_NDL_FDrawableCopyPixels = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixelsMergeAlpha;
const char* pSource_GLES100_NDL_FDrawableCopyPixelsMergeAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixelsNoDestAlpha;
const char* pSource_GLES100_NDL_FDrawableCopyPixelsNoDestAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VDrawableCopyPixelsAlpha;
const char* pSource_GLES100_NDL_VDrawableCopyPixelsAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"varying mediump vec2 tc2;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc2.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 4.0)]);\n"
"tc2.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 5.0)]);\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlpha;
const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlphaMergeAlpha;
const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlphaMergeAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlphaNoDestAlpha;
const char* pSource_GLES100_NDL_FDrawableCopyPixelsAlphaNoDestAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableMerge;
const char* pSource_GLES100_NDL_FDrawableMerge = 
"precision mediump float;\n"
"uniform mat4 cxmul;\n"
"uniform mat4 cxmul1;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawableCompare;
const char* pSource_GLES100_NDL_FDrawableCompare = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"vec4 diff = fcolor0 - fcolor1;\n"
"vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );\n"
"vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;\n"
"vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));\n"
"vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;\n"
"float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));\n"
"fcolor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FDrawablePaletteMap;
const char* pSource_GLES100_NDL_FDrawablePaletteMap = 
"precision mediump float;\n"
"uniform sampler2D srctex;\n"
"uniform sampler2D tex;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fchannels = texture2D(tex, tc0);\n"
"fcolor  = texture2D(srctex, vec2(fchannels.r, 0.125));\n"
"fcolor += texture2D(srctex, vec2(fchannels.g, 0.375));\n"
"fcolor += texture2D(srctex, vec2(fchannels.b, 0.625));\n"
"fcolor += texture2D(srctex, vec2(fchannels.a, 0.875));\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendLighten;
const char* pSource_GLES100_NDL_FBlendLighten = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"fcolor     = max(src,dst) * src.a + (1.0-src.a)*dst;\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendDarken;
const char* pSource_GLES100_NDL_FBlendDarken = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 clr = min(src.rgb, dst.rgb);\n"
"fcolor.rgb = clr * (dst.a) + (1.0-dst.a)*src.rgb + dst.rgb*(1.0-src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendOverlay;
const char* pSource_GLES100_NDL_FBlendOverlay = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (screen * select + mult * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendHardlight;
const char* pSource_GLES100_NDL_FBlendHardlight = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (mult * select + screen * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendDifference;
const char* pSource_GLES100_NDL_FBlendDifference = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"fcolor     = max(src - dst, dst - src);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES100_NDL_VBlendLayer;
const char* pSource_GLES100_NDL_VBlendLayer = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES100_NDL_FBlendLayer;
const char* pSource_GLES100_NDL_FBlendLayer = 
"precision mediump float;\n"
"uniform sampler2D alphatex;\n"
"uniform sampler2D srctex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"float alp = texture2D(alphatex, tc1).a;\n"
"fcolor    = texture2D(srctex, tc0);\n"
"fcolor    *= alp;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTG;
const char* pSource_GLES_VTexTG = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FTexTG;
const char* pSource_GLES_FTexTG = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGTexDensity;
const char* pSource_GLES_VTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexDensity;
const char* pSource_GLES_FTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGMul;
const char* pSource_GLES_FTexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGInv;
const char* pSource_GLES_FTexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGEAlpha;
const char* pSource_GLES_VTexTGEAlpha = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGEAlpha;
const char* pSource_GLES_FTexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGEAlphaTexDensity;
const char* pSource_GLES_VTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGEAlphaTexDensity;
const char* pSource_GLES_FTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGEAlphaMul;
const char* pSource_GLES_FTexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGEAlphaInv;
const char* pSource_GLES_FTexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGCxform;
const char* pSource_GLES_VTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxform;
const char* pSource_GLES_FTexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformMul;
const char* pSource_GLES_FTexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformInv;
const char* pSource_GLES_FTexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGCxformEAlpha;
const char* pSource_GLES_VTexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformEAlpha;
const char* pSource_GLES_FTexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformEAlphaMul;
const char* pSource_GLES_FTexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformEAlphaInv;
const char* pSource_GLES_FTexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGCxformAc;
const char* pSource_GLES_VTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAc;
const char* pSource_GLES_FTexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAcMul;
const char* pSource_GLES_FTexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAcInv;
const char* pSource_GLES_FTexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGCxformAcEAlpha;
const char* pSource_GLES_VTexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAcEAlpha;
const char* pSource_GLES_FTexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAcEAlphaMul;
const char* pSource_GLES_FTexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCxformAcEAlphaInv;
const char* pSource_GLES_FTexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTG;
const char* pSource_GLES_FATexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGTexDensity;
const char* pSource_GLES_FATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGMul;
const char* pSource_GLES_FATexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGInv;
const char* pSource_GLES_FATexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGEAlpha;
const char* pSource_GLES_FATexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGEAlphaTexDensity;
const char* pSource_GLES_FATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGEAlphaMul;
const char* pSource_GLES_FATexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGEAlphaInv;
const char* pSource_GLES_FATexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VATexTGCxform;
const char* pSource_GLES_VATexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxform;
const char* pSource_GLES_FATexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformMul;
const char* pSource_GLES_FATexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformInv;
const char* pSource_GLES_FATexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VATexTGCxformEAlpha;
const char* pSource_GLES_VATexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformEAlpha;
const char* pSource_GLES_FATexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformEAlphaMul;
const char* pSource_GLES_FATexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformEAlphaInv;
const char* pSource_GLES_FATexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VATexTGCxformAc;
const char* pSource_GLES_VATexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAc;
const char* pSource_GLES_FATexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAcMul;
const char* pSource_GLES_FATexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAcInv;
const char* pSource_GLES_FATexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VATexTGCxformAcEAlpha;
const char* pSource_GLES_VATexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAcEAlpha;
const char* pSource_GLES_FATexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAcEAlphaMul;
const char* pSource_GLES_FATexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGCxformAcEAlphaInv;
const char* pSource_GLES_FATexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertex;
const char* pSource_GLES_VVertex = 
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_FVertex;
const char* pSource_GLES_FVertex = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexMul;
const char* pSource_GLES_FVertexMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexInv;
const char* pSource_GLES_FVertexInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertexEAlpha;
const char* pSource_GLES_VVertexEAlpha = 
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FVertexEAlpha;
const char* pSource_GLES_FVertexEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexEAlphaMul;
const char* pSource_GLES_FVertexEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexEAlphaInv;
const char* pSource_GLES_FVertexEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertexCxform;
const char* pSource_GLES_VVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxform;
const char* pSource_GLES_FVertexCxform = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformMul;
const char* pSource_GLES_FVertexCxformMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformInv;
const char* pSource_GLES_FVertexCxformInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertexCxformEAlpha;
const char* pSource_GLES_VVertexCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformEAlpha;
const char* pSource_GLES_FVertexCxformEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformEAlphaMul;
const char* pSource_GLES_FVertexCxformEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformEAlphaInv;
const char* pSource_GLES_FVertexCxformEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertexCxformAc;
const char* pSource_GLES_VVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAc;
const char* pSource_GLES_FVertexCxformAc = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAcMul;
const char* pSource_GLES_FVertexCxformAcMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAcInv;
const char* pSource_GLES_FVertexCxformAcInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VVertexCxformAcEAlpha;
const char* pSource_GLES_VVertexCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAcEAlpha;
const char* pSource_GLES_FVertexCxformAcEAlpha = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAcEAlphaMul;
const char* pSource_GLES_FVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FVertexCxformAcEAlphaInv;
const char* pSource_GLES_FVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGTexTG;
const char* pSource_GLES_VTexTGTexTG = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTG;
const char* pSource_GLES_FTexTGTexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGTexTGTexDensity;
const char* pSource_GLES_VTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGTexDensity;
const char* pSource_GLES_FTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGMul;
const char* pSource_GLES_FTexTGTexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGInv;
const char* pSource_GLES_FTexTGTexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGEAlpha;
const char* pSource_GLES_FTexTGTexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGEAlphaTexDensity;
const char* pSource_GLES_FTexTGTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGEAlphaMul;
const char* pSource_GLES_FTexTGTexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGEAlphaInv;
const char* pSource_GLES_FTexTGTexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGTexTGCxform;
const char* pSource_GLES_VTexTGTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxform;
const char* pSource_GLES_FTexTGTexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformMul;
const char* pSource_GLES_FTexTGTexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformInv;
const char* pSource_GLES_FTexTGTexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformEAlpha;
const char* pSource_GLES_FTexTGTexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformEAlphaMul;
const char* pSource_GLES_FTexTGTexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformEAlphaInv;
const char* pSource_GLES_FTexTGTexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGTexTGCxformAc;
const char* pSource_GLES_VTexTGTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAc;
const char* pSource_GLES_FTexTGTexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAcMul;
const char* pSource_GLES_FTexTGTexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAcInv;
const char* pSource_GLES_FTexTGTexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAcEAlpha;
const char* pSource_GLES_FTexTGTexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAcEAlphaMul;
const char* pSource_GLES_FTexTGTexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGTexTGCxformAcEAlphaInv;
const char* pSource_GLES_FTexTGTexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTG;
const char* pSource_GLES_FATexTGATexTG = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGTexDensity;
const char* pSource_GLES_FATexTGATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGMul;
const char* pSource_GLES_FATexTGATexTGMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGInv;
const char* pSource_GLES_FATexTGATexTGInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGEAlpha;
const char* pSource_GLES_FATexTGATexTGEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGEAlphaTexDensity;
const char* pSource_GLES_FATexTGATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGEAlphaMul;
const char* pSource_GLES_FATexTGATexTGEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGEAlphaInv;
const char* pSource_GLES_FATexTGATexTGEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxform;
const char* pSource_GLES_FATexTGATexTGCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformMul;
const char* pSource_GLES_FATexTGATexTGCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformInv;
const char* pSource_GLES_FATexTGATexTGCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformEAlpha;
const char* pSource_GLES_FATexTGATexTGCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformEAlphaMul;
const char* pSource_GLES_FATexTGATexTGCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformEAlphaInv;
const char* pSource_GLES_FATexTGATexTGCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAc;
const char* pSource_GLES_FATexTGATexTGCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAcMul;
const char* pSource_GLES_FATexTGATexTGCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAcInv;
const char* pSource_GLES_FATexTGATexTGCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAcEAlpha;
const char* pSource_GLES_FATexTGATexTGCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAcEAlphaMul;
const char* pSource_GLES_FATexTGATexTGCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGATexTGCxformAcEAlphaInv;
const char* pSource_GLES_FATexTGATexTGCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGVertex;
const char* pSource_GLES_VTexTGVertex = 
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertex;
const char* pSource_GLES_FTexTGVertex = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGVertexTexDensity;
const char* pSource_GLES_VTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexTexDensity;
const char* pSource_GLES_FTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexMul;
const char* pSource_GLES_FTexTGVertexMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexInv;
const char* pSource_GLES_FTexTGVertexInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexEAlpha;
const char* pSource_GLES_FTexTGVertexEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexEAlphaTexDensity;
const char* pSource_GLES_FTexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexEAlphaMul;
const char* pSource_GLES_FTexTGVertexEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexEAlphaInv;
const char* pSource_GLES_FTexTGVertexEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGVertexCxform;
const char* pSource_GLES_VTexTGVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxform;
const char* pSource_GLES_FTexTGVertexCxform = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformMul;
const char* pSource_GLES_FTexTGVertexCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformInv;
const char* pSource_GLES_FTexTGVertexCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformEAlpha;
const char* pSource_GLES_FTexTGVertexCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformEAlphaMul;
const char* pSource_GLES_FTexTGVertexCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformEAlphaInv;
const char* pSource_GLES_FTexTGVertexCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexTGVertexCxformAc;
const char* pSource_GLES_VTexTGVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAc;
const char* pSource_GLES_FTexTGVertexCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAcMul;
const char* pSource_GLES_FTexTGVertexCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAcInv;
const char* pSource_GLES_FTexTGVertexCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAcEAlpha;
const char* pSource_GLES_FTexTGVertexCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES_FTexTGVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES_FTexTGVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertex;
const char* pSource_GLES_FATexTGVertex = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexTexDensity;
const char* pSource_GLES_FATexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexMul;
const char* pSource_GLES_FATexTGVertexMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexInv;
const char* pSource_GLES_FATexTGVertexInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexEAlpha;
const char* pSource_GLES_FATexTGVertexEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexEAlphaTexDensity;
const char* pSource_GLES_FATexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexEAlphaMul;
const char* pSource_GLES_FATexTGVertexEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexEAlphaInv;
const char* pSource_GLES_FATexTGVertexEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxform;
const char* pSource_GLES_FATexTGVertexCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformMul;
const char* pSource_GLES_FATexTGVertexCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformInv;
const char* pSource_GLES_FATexTGVertexCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformEAlpha;
const char* pSource_GLES_FATexTGVertexCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformEAlphaMul;
const char* pSource_GLES_FATexTGVertexCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformEAlphaInv;
const char* pSource_GLES_FATexTGVertexCxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAc;
const char* pSource_GLES_FATexTGVertexCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAcMul;
const char* pSource_GLES_FATexTGVertexCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAcInv;
const char* pSource_GLES_FATexTGVertexCxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAcEAlpha;
const char* pSource_GLES_FATexTGVertexCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES_FATexTGVertexCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES_FATexTGVertexCxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTG;
const char* pSource_GLES_VPosition3dTexTG = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGTexDensity;
const char* pSource_GLES_VPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGEAlpha;
const char* pSource_GLES_VPosition3dTexTGEAlpha = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES_VPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGCxform;
const char* pSource_GLES_VPosition3dTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGCxformEAlpha;
const char* pSource_GLES_VPosition3dTexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGCxformAc;
const char* pSource_GLES_VPosition3dTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES_VPosition3dTexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dATexTGCxform;
const char* pSource_GLES_VPosition3dATexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VPosition3dATexTGCxformEAlpha;
const char* pSource_GLES_VPosition3dATexTGCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dATexTGCxformAc;
const char* pSource_GLES_VPosition3dATexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES_VPosition3dATexTGCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertex;
const char* pSource_GLES_VPosition3dVertex = 
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertexEAlpha;
const char* pSource_GLES_VPosition3dVertexEAlpha = 
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertexCxform;
const char* pSource_GLES_VPosition3dVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertexCxformEAlpha;
const char* pSource_GLES_VPosition3dVertexCxformEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertexCxformAc;
const char* pSource_GLES_VPosition3dVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES_VPosition3dVertexCxformAcEAlpha = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGTexTG;
const char* pSource_GLES_VPosition3dTexTGTexTG = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES_VPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGTexTGCxform;
const char* pSource_GLES_VPosition3dTexTGTexTGCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES_VPosition3dTexTGTexTGCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGVertex;
const char* pSource_GLES_VPosition3dTexTGVertex = 
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGVertexTexDensity;
const char* pSource_GLES_VPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGVertexCxform;
const char* pSource_GLES_VPosition3dTexTGVertexCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexTGVertexCxformAc;
const char* pSource_GLES_VPosition3dTexTGVertexCxformAc = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTG;
const char* pSource_GLES_VBatchTexTG = 
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGTexDensity;
const char* pSource_GLES_VBatchTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGEAlpha;
const char* pSource_GLES_VBatchTexTGEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGEAlphaTexDensity;
const char* pSource_GLES_VBatchTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGCxform;
const char* pSource_GLES_VBatchTexTGCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGCxformEAlpha;
const char* pSource_GLES_VBatchTexTGCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGCxformAc;
const char* pSource_GLES_VBatchTexTGCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGCxformAcEAlpha;
const char* pSource_GLES_VBatchTexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchATexTGCxform;
const char* pSource_GLES_VBatchATexTGCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchATexTGCxformEAlpha;
const char* pSource_GLES_VBatchATexTGCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchATexTGCxformAc;
const char* pSource_GLES_VBatchATexTGCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchATexTGCxformAcEAlpha;
const char* pSource_GLES_VBatchATexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchVertex;
const char* pSource_GLES_VBatchVertex = 
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_VBatchVertexEAlpha;
const char* pSource_GLES_VBatchVertexEAlpha = 
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchVertexCxform;
const char* pSource_GLES_VBatchVertexCxform = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchVertexCxformEAlpha;
const char* pSource_GLES_VBatchVertexCxformEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchVertexCxformAc;
const char* pSource_GLES_VBatchVertexCxformAc = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchVertexCxformAcEAlpha;
const char* pSource_GLES_VBatchVertexCxformAcEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGTexTG;
const char* pSource_GLES_VBatchTexTGTexTG = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGTexTGTexDensity;
const char* pSource_GLES_VBatchTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGTexTGCxform;
const char* pSource_GLES_VBatchTexTGTexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGTexTGCxformAc;
const char* pSource_GLES_VBatchTexTGTexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGVertex;
const char* pSource_GLES_VBatchTexTGVertex = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGVertexTexDensity;
const char* pSource_GLES_VBatchTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGVertexCxform;
const char* pSource_GLES_VBatchTexTGVertexCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexTGVertexCxformAc;
const char* pSource_GLES_VBatchTexTGVertexCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTG;
const char* pSource_GLES_VBatchPosition3dTexTG = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGTexDensity;
const char* pSource_GLES_VBatchPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGEAlpha;
const char* pSource_GLES_VBatchPosition3dTexTGEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES_VBatchPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGCxform;
const char* pSource_GLES_VBatchPosition3dTexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGCxformEAlpha;
const char* pSource_GLES_VBatchPosition3dTexTGCxformEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGCxformAc;
const char* pSource_GLES_VBatchPosition3dTexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES_VBatchPosition3dTexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dATexTGCxform;
const char* pSource_GLES_VBatchPosition3dATexTGCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dATexTGCxformEAlpha;
const char* pSource_GLES_VBatchPosition3dATexTGCxformEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dATexTGCxformAc;
const char* pSource_GLES_VBatchPosition3dATexTGCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES_VBatchPosition3dATexTGCxformAcEAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertex;
const char* pSource_GLES_VBatchPosition3dVertex = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertexEAlpha;
const char* pSource_GLES_VBatchPosition3dVertexEAlpha = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertexCxform;
const char* pSource_GLES_VBatchPosition3dVertexCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertexCxformEAlpha;
const char* pSource_GLES_VBatchPosition3dVertexCxformEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertexCxformAc;
const char* pSource_GLES_VBatchPosition3dVertexCxformAc = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES_VBatchPosition3dVertexCxformAcEAlpha = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGTexTG;
const char* pSource_GLES_VBatchPosition3dTexTGTexTG = 
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES_VBatchPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGTexTGCxform;
const char* pSource_GLES_VBatchPosition3dTexTGTexTGCxform = 
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES_VBatchPosition3dTexTGTexTGCxformAc = 
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGVertex;
const char* pSource_GLES_VBatchPosition3dTexTGVertex = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGVertexTexDensity;
const char* pSource_GLES_VBatchPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGVertexCxform;
const char* pSource_GLES_VBatchPosition3dTexTGVertexCxform = 
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexTGVertexCxformAc;
const char* pSource_GLES_VBatchPosition3dTexTGVertexCxformAc = 
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTG;
const char* pSource_GLES_VInstancedTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTG;
const char* pSource_GLES_FInstancedTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGTexDensity;
const char* pSource_GLES_VInstancedTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexDensity;
const char* pSource_GLES_FInstancedTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGMul;
const char* pSource_GLES_FInstancedTexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGInv;
const char* pSource_GLES_FInstancedTexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGEAlpha;
const char* pSource_GLES_VInstancedTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGEAlpha;
const char* pSource_GLES_FInstancedTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGEAlphaTexDensity;
const char* pSource_GLES_VInstancedTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGEAlphaTexDensity;
const char* pSource_GLES_FInstancedTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGEAlphaMul;
const char* pSource_GLES_FInstancedTexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGEAlphaInv;
const char* pSource_GLES_FInstancedTexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGCxform;
const char* pSource_GLES_VInstancedTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxform;
const char* pSource_GLES_FInstancedTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformMul;
const char* pSource_GLES_FInstancedTexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformInv;
const char* pSource_GLES_FInstancedTexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGCxformEAlpha;
const char* pSource_GLES_VInstancedTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformEAlpha;
const char* pSource_GLES_FInstancedTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformEAlphaMul;
const char* pSource_GLES_FInstancedTexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformEAlphaInv;
const char* pSource_GLES_FInstancedTexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGCxformAc;
const char* pSource_GLES_VInstancedTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAc;
const char* pSource_GLES_FInstancedTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAcMul;
const char* pSource_GLES_FInstancedTexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAcInv;
const char* pSource_GLES_FInstancedTexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGCxformAcEAlpha;
const char* pSource_GLES_VInstancedTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAcEAlpha;
const char* pSource_GLES_FInstancedTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedTexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedTexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTG;
const char* pSource_GLES_FInstancedATexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGTexDensity;
const char* pSource_GLES_FInstancedATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGMul;
const char* pSource_GLES_FInstancedATexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGInv;
const char* pSource_GLES_FInstancedATexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGEAlpha;
const char* pSource_GLES_FInstancedATexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGEAlphaTexDensity;
const char* pSource_GLES_FInstancedATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGEAlphaMul;
const char* pSource_GLES_FInstancedATexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGEAlphaInv;
const char* pSource_GLES_FInstancedATexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedATexTGCxform;
const char* pSource_GLES_VInstancedATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxform;
const char* pSource_GLES_FInstancedATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformMul;
const char* pSource_GLES_FInstancedATexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformInv;
const char* pSource_GLES_FInstancedATexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedATexTGCxformEAlpha;
const char* pSource_GLES_VInstancedATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformEAlpha;
const char* pSource_GLES_FInstancedATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformEAlphaMul;
const char* pSource_GLES_FInstancedATexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformEAlphaInv;
const char* pSource_GLES_FInstancedATexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedATexTGCxformAc;
const char* pSource_GLES_VInstancedATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAc;
const char* pSource_GLES_FInstancedATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAcMul;
const char* pSource_GLES_FInstancedATexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAcInv;
const char* pSource_GLES_FInstancedATexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedATexTGCxformAcEAlpha;
const char* pSource_GLES_VInstancedATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAcEAlpha;
const char* pSource_GLES_FInstancedATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedATexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedATexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor      = texture2D(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture2D(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertex;
const char* pSource_GLES_VInstancedVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertex;
const char* pSource_GLES_FInstancedVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexMul;
const char* pSource_GLES_FInstancedVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexInv;
const char* pSource_GLES_FInstancedVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertexEAlpha;
const char* pSource_GLES_VInstancedVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexEAlpha;
const char* pSource_GLES_FInstancedVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexEAlphaMul;
const char* pSource_GLES_FInstancedVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexEAlphaInv;
const char* pSource_GLES_FInstancedVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertexCxform;
const char* pSource_GLES_VInstancedVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxform;
const char* pSource_GLES_FInstancedVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformMul;
const char* pSource_GLES_FInstancedVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformInv;
const char* pSource_GLES_FInstancedVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertexCxformEAlpha;
const char* pSource_GLES_VInstancedVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformEAlpha;
const char* pSource_GLES_FInstancedVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformEAlphaMul;
const char* pSource_GLES_FInstancedVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformEAlphaInv;
const char* pSource_GLES_FInstancedVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertexCxformAc;
const char* pSource_GLES_VInstancedVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAc;
const char* pSource_GLES_FInstancedVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAcMul;
const char* pSource_GLES_FInstancedVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAcInv;
const char* pSource_GLES_FInstancedVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedVertexCxformAcEAlpha;
const char* pSource_GLES_VInstancedVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAcEAlpha;
const char* pSource_GLES_FInstancedVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedVertexCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGTexTG;
const char* pSource_GLES_VInstancedTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTG;
const char* pSource_GLES_FInstancedTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGTexTGTexDensity;
const char* pSource_GLES_VInstancedTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGTexDensity;
const char* pSource_GLES_FInstancedTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGMul;
const char* pSource_GLES_FInstancedTexTGTexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGInv;
const char* pSource_GLES_FInstancedTexTGTexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGEAlpha;
const char* pSource_GLES_FInstancedTexTGTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGEAlphaTexDensity;
const char* pSource_GLES_FInstancedTexTGTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGEAlphaMul;
const char* pSource_GLES_FInstancedTexTGTexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGEAlphaInv;
const char* pSource_GLES_FInstancedTexTGTexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGTexTGCxform;
const char* pSource_GLES_VInstancedTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxform;
const char* pSource_GLES_FInstancedTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformMul;
const char* pSource_GLES_FInstancedTexTGTexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformInv;
const char* pSource_GLES_FInstancedTexTGTexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlpha;
const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlphaMul;
const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlphaInv;
const char* pSource_GLES_FInstancedTexTGTexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGTexTGCxformAc;
const char* pSource_GLES_VInstancedTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAc;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAcMul;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAcInv;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlpha;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedTexTGTexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTG;
const char* pSource_GLES_FInstancedATexTGATexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGTexDensity;
const char* pSource_GLES_FInstancedATexTGATexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGMul;
const char* pSource_GLES_FInstancedATexTGATexTGMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGInv;
const char* pSource_GLES_FInstancedATexTGATexTGInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGEAlpha;
const char* pSource_GLES_FInstancedATexTGATexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGEAlphaTexDensity;
const char* pSource_GLES_FInstancedATexTGATexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGEAlphaMul;
const char* pSource_GLES_FInstancedATexTGATexTGEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGEAlphaInv;
const char* pSource_GLES_FInstancedATexTGATexTGEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxform;
const char* pSource_GLES_FInstancedATexTGATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformMul;
const char* pSource_GLES_FInstancedATexTGATexTGCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformInv;
const char* pSource_GLES_FInstancedATexTGATexTGCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlpha;
const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlphaMul;
const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlphaInv;
const char* pSource_GLES_FInstancedATexTGATexTGCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAc;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAcMul;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAcInv;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlpha;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedATexTGATexTGCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture2D(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture2D(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGVertex;
const char* pSource_GLES_VInstancedTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertex;
const char* pSource_GLES_FInstancedTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGVertexTexDensity;
const char* pSource_GLES_VInstancedTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexTexDensity;
const char* pSource_GLES_FInstancedTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexMul;
const char* pSource_GLES_FInstancedTexTGVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexInv;
const char* pSource_GLES_FInstancedTexTGVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexEAlpha;
const char* pSource_GLES_FInstancedTexTGVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexEAlphaTexDensity;
const char* pSource_GLES_FInstancedTexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexEAlphaMul;
const char* pSource_GLES_FInstancedTexTGVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexEAlphaInv;
const char* pSource_GLES_FInstancedTexTGVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGVertexCxform;
const char* pSource_GLES_VInstancedTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxform;
const char* pSource_GLES_FInstancedTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformMul;
const char* pSource_GLES_FInstancedTexTGVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformInv;
const char* pSource_GLES_FInstancedTexTGVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformEAlpha;
const char* pSource_GLES_FInstancedTexTGVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformEAlphaMul;
const char* pSource_GLES_FInstancedTexTGVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformEAlphaInv;
const char* pSource_GLES_FInstancedTexTGVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexTGVertexCxformAc;
const char* pSource_GLES_VInstancedTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAc;
const char* pSource_GLES_FInstancedTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAcMul;
const char* pSource_GLES_FInstancedTexTGVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAcInv;
const char* pSource_GLES_FInstancedTexTGVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlpha;
const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedTexTGVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertex;
const char* pSource_GLES_FInstancedATexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexTexDensity;
const char* pSource_GLES_FInstancedATexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexMul;
const char* pSource_GLES_FInstancedATexTGVertexMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexInv;
const char* pSource_GLES_FInstancedATexTGVertexInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexEAlpha;
const char* pSource_GLES_FInstancedATexTGVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexEAlphaTexDensity;
const char* pSource_GLES_FInstancedATexTGVertexEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexEAlphaMul;
const char* pSource_GLES_FInstancedATexTGVertexEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexEAlphaInv;
const char* pSource_GLES_FInstancedATexTGVertexEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxform;
const char* pSource_GLES_FInstancedATexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformMul;
const char* pSource_GLES_FInstancedATexTGVertexCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformInv;
const char* pSource_GLES_FInstancedATexTGVertexCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformEAlpha;
const char* pSource_GLES_FInstancedATexTGVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformEAlphaMul;
const char* pSource_GLES_FInstancedATexTGVertexCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformEAlphaInv;
const char* pSource_GLES_FInstancedATexTGVertexCxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAc;
const char* pSource_GLES_FInstancedATexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAcMul;
const char* pSource_GLES_FInstancedATexTGVertexCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAcInv;
const char* pSource_GLES_FInstancedATexTGVertexCxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlpha;
const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES_FInstancedATexTGVertexCxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 fcolor0 = texture2D(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture2D(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTG;
const char* pSource_GLES_VInstancedPosition3dTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGTexDensity;
const char* pSource_GLES_VInstancedPosition3dTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGEAlpha;
const char* pSource_GLES_VInstancedPosition3dTexTGEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGEAlphaTexDensity;
const char* pSource_GLES_VInstancedPosition3dTexTGEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGCxform;
const char* pSource_GLES_VInstancedPosition3dTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGCxformEAlpha;
const char* pSource_GLES_VInstancedPosition3dTexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGCxformAc;
const char* pSource_GLES_VInstancedPosition3dTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES_VInstancedPosition3dTexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dATexTGCxform;
const char* pSource_GLES_VInstancedPosition3dATexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dATexTGCxformEAlpha;
const char* pSource_GLES_VInstancedPosition3dATexTGCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dATexTGCxformAc;
const char* pSource_GLES_VInstancedPosition3dATexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES_VInstancedPosition3dATexTGCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertex;
const char* pSource_GLES_VInstancedPosition3dVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertexEAlpha;
const char* pSource_GLES_VInstancedPosition3dVertexEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertexCxform;
const char* pSource_GLES_VInstancedPosition3dVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertexCxformEAlpha;
const char* pSource_GLES_VInstancedPosition3dVertexCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertexCxformAc;
const char* pSource_GLES_VInstancedPosition3dVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES_VInstancedPosition3dVertexCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGTexTG;
const char* pSource_GLES_VInstancedPosition3dTexTGTexTG = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGTexTGTexDensity;
const char* pSource_GLES_VInstancedPosition3dTexTGTexTGTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGTexTGCxform;
const char* pSource_GLES_VInstancedPosition3dTexTGTexTGCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES_VInstancedPosition3dTexTGTexTGCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[240];\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGVertex;
const char* pSource_GLES_VInstancedPosition3dTexTGVertex = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGVertexTexDensity;
const char* pSource_GLES_VInstancedPosition3dTexTGVertexTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGVertexCxform;
const char* pSource_GLES_VInstancedPosition3dTexTGVertexCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexTGVertexCxformAc;
const char* pSource_GLES_VInstancedPosition3dTexTGVertexCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[192];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec4 afactor;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 color;\n"
"varying mediump vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES_VSolid;
const char* pSource_GLES_VSolid = 
"uniform vec4 mvp[2];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FSolid;
const char* pSource_GLES_FSolid = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSolidMul;
const char* pSource_GLES_FSolidMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSolidInv;
const char* pSource_GLES_FSolidInv = 
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VText;
const char* pSource_GLES_VText = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_FText;
const char* pSource_GLES_FText = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTextTexDensity;
const char* pSource_GLES_VTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_FTextTexDensity;
const char* pSource_GLES_FTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTextMul;
const char* pSource_GLES_FTextMul = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTextInv;
const char* pSource_GLES_FTextInv = 
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VTexUV;
const char* pSource_GLES_VTexUV = 
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VTexUVTexDensity;
const char* pSource_GLES_VTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VTexUVCxform;
const char* pSource_GLES_VTexUVCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_FATexUV;
const char* pSource_GLES_FATexUV = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVTexDensity;
const char* pSource_GLES_FATexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVMul;
const char* pSource_GLES_FATexUVMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVInv;
const char* pSource_GLES_FATexUVInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVCxform;
const char* pSource_GLES_FATexUVCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVCxformMul;
const char* pSource_GLES_FATexUVCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FATexUVCxformInv;
const char* pSource_GLES_FATexUVCxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dSolid;
const char* pSource_GLES_VPosition3dSolid = 
"uniform vec4 mvp[4];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"}\n";

extern const char* pSource_GLES_VPosition3dText;
const char* pSource_GLES_VPosition3dText = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTextTexDensity;
const char* pSource_GLES_VPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexUV;
const char* pSource_GLES_VPosition3dTexUV = 
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexUVTexDensity;
const char* pSource_GLES_VPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VPosition3dTexUVCxform;
const char* pSource_GLES_VPosition3dTexUVCxform = 
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES_VBatchSolid;
const char* pSource_GLES_VBatchSolid = 
"uniform vec4 vfuniforms[48];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchText;
const char* pSource_GLES_VBatchText = 
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchTextTexDensity;
const char* pSource_GLES_VBatchTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexUV;
const char* pSource_GLES_VBatchTexUV = 
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexUVTexDensity;
const char* pSource_GLES_VBatchTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchTexUVCxform;
const char* pSource_GLES_VBatchTexUVCxform = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dSolid;
const char* pSource_GLES_VBatchPosition3dSolid = 
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dText;
const char* pSource_GLES_VBatchPosition3dText = 
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTextTexDensity;
const char* pSource_GLES_VBatchPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexUV;
const char* pSource_GLES_VBatchPosition3dTexUV = 
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexUVTexDensity;
const char* pSource_GLES_VBatchPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VBatchPosition3dTexUVCxform;
const char* pSource_GLES_VBatchPosition3dTexUVCxform = 
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_VInstancedSolid;
const char* pSource_GLES_VInstancedSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES_FInstancedSolid;
const char* pSource_GLES_FInstancedSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedSolidMul;
const char* pSource_GLES_FInstancedSolidMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedSolidInv;
const char* pSource_GLES_FInstancedSolidInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = cxmul;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedText;
const char* pSource_GLES_VInstancedText = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_FInstancedText;
const char* pSource_GLES_FInstancedText = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTextTexDensity;
const char* pSource_GLES_VInstancedTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTextTexDensity;
const char* pSource_GLES_FInstancedTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTextMul;
const char* pSource_GLES_FInstancedTextMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedTextInv;
const char* pSource_GLES_FInstancedTextInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture2D(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexUV;
const char* pSource_GLES_VInstancedTexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexUVTexDensity;
const char* pSource_GLES_VInstancedTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[48];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedTexUVCxform;
const char* pSource_GLES_VInstancedTexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUV;
const char* pSource_GLES_FInstancedATexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVTexDensity;
const char* pSource_GLES_FInstancedATexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVMul;
const char* pSource_GLES_FInstancedATexUVMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVInv;
const char* pSource_GLES_FInstancedATexUVInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVCxform;
const char* pSource_GLES_FInstancedATexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVCxformMul;
const char* pSource_GLES_FInstancedATexUVCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedATexUVCxformInv;
const char* pSource_GLES_FInstancedATexUVCxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex[int(0.0)],tc0);\n"
"fcolor.a = texture2D(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dSolid;
const char* pSource_GLES_VInstancedPosition3dSolid = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dText;
const char* pSource_GLES_VInstancedPosition3dText = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTextTexDensity;
const char* pSource_GLES_VInstancedPosition3dTextTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute lowp vec4 acolor;\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"varying lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexUV;
const char* pSource_GLES_VInstancedPosition3dTexUV = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexUVTexDensity;
const char* pSource_GLES_VInstancedPosition3dTexUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[96];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES_VInstancedPosition3dTexUVCxform;
const char* pSource_GLES_VInstancedPosition3dTexUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"uniform vec4 vfuniforms[144];\n"
"attribute mediump vec2 atc;\n"
"attribute vec4 pos;\n"
"varying lowp vec4 fucxadd;\n"
"varying lowp vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceIDEXT) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FYUV;
const char* pSource_GLES_FYUV = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVTexDensity;
const char* pSource_GLES_FYUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVMul;
const char* pSource_GLES_FYUVMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVEAlpha;
const char* pSource_GLES_FYUVEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVEAlphaTexDensity;
const char* pSource_GLES_FYUVEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVEAlphaMul;
const char* pSource_GLES_FYUVEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxform;
const char* pSource_GLES_FYUVCxform = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformMul;
const char* pSource_GLES_FYUVCxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformEAlpha;
const char* pSource_GLES_FYUVCxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformEAlphaMul;
const char* pSource_GLES_FYUVCxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformAc;
const char* pSource_GLES_FYUVCxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformAcMul;
const char* pSource_GLES_FYUVCxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformAcEAlpha;
const char* pSource_GLES_FYUVCxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVCxformAcEAlphaMul;
const char* pSource_GLES_FYUVCxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVA;
const char* pSource_GLES_FYUVA = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVATexDensity;
const char* pSource_GLES_FYUVATexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAMul;
const char* pSource_GLES_FYUVAMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAInv;
const char* pSource_GLES_FYUVAInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAEAlpha;
const char* pSource_GLES_FYUVAEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAEAlphaTexDensity;
const char* pSource_GLES_FYUVAEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAEAlphaMul;
const char* pSource_GLES_FYUVAEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVAEAlphaInv;
const char* pSource_GLES_FYUVAEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxform;
const char* pSource_GLES_FYUVACxform = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformMul;
const char* pSource_GLES_FYUVACxformMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformInv;
const char* pSource_GLES_FYUVACxformInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformEAlpha;
const char* pSource_GLES_FYUVACxformEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformEAlphaMul;
const char* pSource_GLES_FYUVACxformEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformEAlphaInv;
const char* pSource_GLES_FYUVACxformEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAc;
const char* pSource_GLES_FYUVACxformAc = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAcMul;
const char* pSource_GLES_FYUVACxformAcMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAcInv;
const char* pSource_GLES_FYUVACxformAcInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAcEAlpha;
const char* pSource_GLES_FYUVACxformAcEAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAcEAlphaMul;
const char* pSource_GLES_FYUVACxformAcEAlphaMul = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FYUVACxformAcEAlphaInv;
const char* pSource_GLES_FYUVACxformAcEAlphaInv = 
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUV;
const char* pSource_GLES_FInstancedYUV = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVTexDensity;
const char* pSource_GLES_FInstancedYUVTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVMul;
const char* pSource_GLES_FInstancedYUVMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVEAlpha;
const char* pSource_GLES_FInstancedYUVEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVEAlphaTexDensity;
const char* pSource_GLES_FInstancedYUVEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVEAlphaMul;
const char* pSource_GLES_FInstancedYUVEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxform;
const char* pSource_GLES_FInstancedYUVCxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformMul;
const char* pSource_GLES_FInstancedYUVCxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformEAlpha;
const char* pSource_GLES_FInstancedYUVCxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformEAlphaMul;
const char* pSource_GLES_FInstancedYUVCxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformAc;
const char* pSource_GLES_FInstancedYUVCxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformAcMul;
const char* pSource_GLES_FInstancedYUVCxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformAcEAlpha;
const char* pSource_GLES_FInstancedYUVCxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVCxformAcEAlphaMul;
const char* pSource_GLES_FInstancedYUVCxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVA;
const char* pSource_GLES_FInstancedYUVA = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVATexDensity;
const char* pSource_GLES_FInstancedYUVATexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAMul;
const char* pSource_GLES_FInstancedYUVAMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAInv;
const char* pSource_GLES_FInstancedYUVAInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAEAlpha;
const char* pSource_GLES_FInstancedYUVAEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAEAlphaTexDensity;
const char* pSource_GLES_FInstancedYUVAEAlphaTexDensity = 
"#extension GL_OES_standard_derivatives : enable\n"
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAEAlphaMul;
const char* pSource_GLES_FInstancedYUVAEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVAEAlphaInv;
const char* pSource_GLES_FInstancedYUVAEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxform;
const char* pSource_GLES_FInstancedYUVACxform = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformMul;
const char* pSource_GLES_FInstancedYUVACxformMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformInv;
const char* pSource_GLES_FInstancedYUVACxformInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformEAlpha;
const char* pSource_GLES_FInstancedYUVACxformEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformEAlphaMul;
const char* pSource_GLES_FInstancedYUVACxformEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformEAlphaInv;
const char* pSource_GLES_FInstancedYUVACxformEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAc;
const char* pSource_GLES_FInstancedYUVACxformAc = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAcMul;
const char* pSource_GLES_FInstancedYUVACxformAcMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAcInv;
const char* pSource_GLES_FInstancedYUVACxformAcInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAcEAlpha;
const char* pSource_GLES_FInstancedYUVACxformAcEAlpha = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAcEAlphaMul;
const char* pSource_GLES_FInstancedYUVACxformAcEAlphaMul = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FInstancedYUVACxformAcEAlphaInv;
const char* pSource_GLES_FInstancedYUVACxformAcEAlphaInv = 
"#extension GL_EXT_draw_instanced : require\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"varying lowp vec4 factor;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"lowp float c0 = float((texture2D(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture2D(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture2D(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture2D(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCMatrixAc;
const char* pSource_GLES_FTexTGCMatrixAc = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCMatrixAcMul;
const char* pSource_GLES_FTexTGCMatrixAcMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCMatrixAcEAlpha;
const char* pSource_GLES_FTexTGCMatrixAcEAlpha = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FTexTGCMatrixAcEAlphaMul;
const char* pSource_GLES_FTexTGCMatrixAcEAlphaMul = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"varying lowp vec4 factor;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor = texture2D(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBox1Blur;
const char* pSource_GLES_FBox1Blur = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBox1BlurMul;
const char* pSource_GLES_FBox1BlurMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBox2Blur;
const char* pSource_GLES_FBox2Blur = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBox2BlurMul;
const char* pSource_GLES_FBox2BlurMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + i * texscale.xy);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorOuterBevel;
const char* pSource_GLES_FSColorOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorOuterBevelMul;
const char* pSource_GLES_FSColorOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorInnerShadow;
const char* pSource_GLES_FSColorInnerShadow = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorInnerShadowMul;
const char* pSource_GLES_FSColorInnerShadowMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorFullBevel;
const char* pSource_GLES_FSColorFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorFullBevelMul;
const char* pSource_GLES_FSColorFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseOuterBevel;
const char* pSource_GLES_FSColorHideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseOuterBevelMul;
const char* pSource_GLES_FSColorHideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseInnerShadow;
const char* pSource_GLES_FSColorHideBaseInnerShadow = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseInnerShadowMul;
const char* pSource_GLES_FSColorHideBaseInnerShadowMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseFullBevel;
const char* pSource_GLES_FSColorHideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColorHideBaseFullBevelMul;
const char* pSource_GLES_FSColorHideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradOuterBevel;
const char* pSource_GLES_FSGradOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradOuterBevelMul;
const char* pSource_GLES_FSGradOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradInnerBevel;
const char* pSource_GLES_FSGradInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradInnerBevelMul;
const char* pSource_GLES_FSGradInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradFullBevel;
const char* pSource_GLES_FSGradFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradFullBevelMul;
const char* pSource_GLES_FSGradFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseOuterBevel;
const char* pSource_GLES_FSGradHideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseOuterBevelMul;
const char* pSource_GLES_FSGradHideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseInnerBevel;
const char* pSource_GLES_FSGradHideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseInnerBevelMul;
const char* pSource_GLES_FSGradHideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseFullBevel;
const char* pSource_GLES_FSGradHideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGradHideBaseFullBevelMul;
const char* pSource_GLES_FSGradHideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture2D(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2OuterBevel;
const char* pSource_GLES_FSColor2OuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2OuterBevelMul;
const char* pSource_GLES_FSColor2OuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2InnerBevel;
const char* pSource_GLES_FSColor2InnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2InnerBevelMul;
const char* pSource_GLES_FSColor2InnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2FullBevel;
const char* pSource_GLES_FSColor2FullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2FullBevelMul;
const char* pSource_GLES_FSColor2FullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseOuterBevel;
const char* pSource_GLES_FSColor2HideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseOuterBevelMul;
const char* pSource_GLES_FSColor2HideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseInnerBevel;
const char* pSource_GLES_FSColor2HideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseInnerBevelMul;
const char* pSource_GLES_FSColor2HideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseFullBevel;
const char* pSource_GLES_FSColor2HideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSColor2HideBaseFullBevelMul;
const char* pSource_GLES_FSColor2HideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2OuterBevel;
const char* pSource_GLES_FSGrad2OuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2OuterBevelMul;
const char* pSource_GLES_FSGrad2OuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2InnerBevel;
const char* pSource_GLES_FSGrad2InnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2InnerBevelMul;
const char* pSource_GLES_FSGrad2InnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2FullBevel;
const char* pSource_GLES_FSGrad2FullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2FullBevelMul;
const char* pSource_GLES_FSGrad2FullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseOuterBevel;
const char* pSource_GLES_FSGrad2HideBaseOuterBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseOuterBevelMul;
const char* pSource_GLES_FSGrad2HideBaseOuterBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseInnerBevel;
const char* pSource_GLES_FSGrad2HideBaseInnerBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseInnerBevelMul;
const char* pSource_GLES_FSGrad2HideBaseInnerBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseFullBevel;
const char* pSource_GLES_FSGrad2HideBaseFullBevel = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FSGrad2HideBaseFullBevelMul;
const char* pSource_GLES_FSGrad2HideBaseFullBevelMul = 
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += texture2D(tex,  tc0 + (offset.xy + i) * texscale.xy).a;\n"
"color.r += texture2D(tex,  tc0 - (offset.xy + i) * texscale.xy).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture2D(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture2D(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = texture2D(srctex,  tc0 * srctexscale.xy);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDisplacementMap;
const char* pSource_GLES_FDisplacementMap = 
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDisplacementMapDMIgnore;
const char* pSource_GLES_FDisplacementMapDMIgnore = 
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + texture2D(tex, tc0) * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDisplacementMapDMColor;
const char* pSource_GLES_FDisplacementMapDMColor = 
"precision mediump float;\n"
"uniform vec4 boundColor;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"varying mediump vec2 tc0;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture2D(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture2D(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + boundColor * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VDrawableCopyPixels;
const char* pSource_GLES_VDrawableCopyPixels = 
"uniform vec4 vfuniforms[144];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixels;
const char* pSource_GLES_FDrawableCopyPixels = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixelsMergeAlpha;
const char* pSource_GLES_FDrawableCopyPixelsMergeAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixelsNoDestAlpha;
const char* pSource_GLES_FDrawableCopyPixelsNoDestAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VDrawableCopyPixelsAlpha;
const char* pSource_GLES_VDrawableCopyPixelsAlpha = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"varying mediump vec2 tc2;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc2.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 4.0)]);\n"
"tc2.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 5.0)]);\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixelsAlpha;
const char* pSource_GLES_FDrawableCopyPixelsAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixelsAlphaMergeAlpha;
const char* pSource_GLES_FDrawableCopyPixelsAlphaMergeAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableCopyPixelsAlphaNoDestAlpha;
const char* pSource_GLES_FDrawableCopyPixelsAlphaNoDestAlpha = 
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"varying vec2 tc2;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_org = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture2D(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture2D(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableMerge;
const char* pSource_GLES_FDrawableMerge = 
"precision mediump float;\n"
"uniform mat4 cxmul;\n"
"uniform mat4 cxmul1;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor_original = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor_source   = texture2D(tex[int(1.0)], tc1);\n"
"fcolor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawableCompare;
const char* pSource_GLES_FDrawableCompare = 
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"varying vec2 tc0;\n"
"varying vec2 tc1;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fcolor0 = texture2D(tex[int(0.0)], tc0);\n"
"vec4 fcolor1 = texture2D(tex[int(1.0)], tc1);\n"
"vec4 diff = fcolor0 - fcolor1;\n"
"vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );\n"
"vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;\n"
"vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));\n"
"vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;\n"
"float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));\n"
"fcolor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FDrawablePaletteMap;
const char* pSource_GLES_FDrawablePaletteMap = 
"precision mediump float;\n"
"uniform sampler2D srctex;\n"
"uniform sampler2D tex;\n"
"varying vec2 tc0;\n"
"void main() {\n"
"vec4 fcolor;\n"
"vec4 fchannels = texture2D(tex, tc0);\n"
"fcolor  = texture2D(srctex, vec2(fchannels.r, 0.125));\n"
"fcolor += texture2D(srctex, vec2(fchannels.g, 0.375));\n"
"fcolor += texture2D(srctex, vec2(fchannels.b, 0.625));\n"
"fcolor += texture2D(srctex, vec2(fchannels.a, 0.875));\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBlendLighten;
const char* pSource_GLES_FBlendLighten = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"fcolor     = max(src,dst) * src.a + (1.0-src.a)*dst;\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBlendDarken;
const char* pSource_GLES_FBlendDarken = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 clr = min(src.rgb, dst.rgb);\n"
"fcolor.rgb = clr * (dst.a) + (1.0-dst.a)*src.rgb + dst.rgb*(1.0-src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBlendOverlay;
const char* pSource_GLES_FBlendOverlay = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (screen * select + mult * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBlendHardlight;
const char* pSource_GLES_FBlendHardlight = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (mult * select + screen * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_FBlendDifference;
const char* pSource_GLES_FBlendDifference = 
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"vec4 src = texture2D(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture2D(dsttex, tc1);\n"
"fcolor     = max(src - dst, dst - src);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES_VBlendLayer;
const char* pSource_GLES_VBlendLayer = 
"uniform vec4 vfuniforms[192];\n"
"attribute vec4 pos;\n"
"attribute float vbatch;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES_FBlendLayer;
const char* pSource_GLES_FBlendLayer = 
"precision mediump float;\n"
"uniform sampler2D alphatex;\n"
"uniform sampler2D srctex;\n"
"varying vec4 fucxadd;\n"
"varying vec4 fucxmul;\n"
"varying mediump vec2 tc0;\n"
"varying mediump vec2 tc1;\n"
"void main() {\n"
"lowp vec4 fcolor;\n"
"float alp = texture2D(alphatex, tc1).a;\n"
"fcolor    = texture2D(srctex, tc0);\n"
"fcolor    *= alp;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"gl_FragColor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTG;
const char* pSource_GLES30_VTexTG = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FTexTG;
const char* pSource_GLES30_FTexTG = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexDensity;
const char* pSource_GLES30_FTexTGTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGMul;
const char* pSource_GLES30_FTexTGMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGInv;
const char* pSource_GLES30_FTexTGInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGEAlpha;
const char* pSource_GLES30_VTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGEAlpha;
const char* pSource_GLES30_FTexTGEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGEAlphaTexDensity;
const char* pSource_GLES30_FTexTGEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGEAlphaMul;
const char* pSource_GLES30_FTexTGEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGEAlphaInv;
const char* pSource_GLES30_FTexTGEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGCxform;
const char* pSource_GLES30_VTexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxform;
const char* pSource_GLES30_FTexTGCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformMul;
const char* pSource_GLES30_FTexTGCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformInv;
const char* pSource_GLES30_FTexTGCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGCxformEAlpha;
const char* pSource_GLES30_VTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformEAlpha;
const char* pSource_GLES30_FTexTGCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformEAlphaMul;
const char* pSource_GLES30_FTexTGCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformEAlphaInv;
const char* pSource_GLES30_FTexTGCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGCxformAc;
const char* pSource_GLES30_VTexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAc;
const char* pSource_GLES30_FTexTGCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAcMul;
const char* pSource_GLES30_FTexTGCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAcInv;
const char* pSource_GLES30_FTexTGCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGCxformAcEAlpha;
const char* pSource_GLES30_VTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAcEAlpha;
const char* pSource_GLES30_FTexTGCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAcEAlphaMul;
const char* pSource_GLES30_FTexTGCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCxformAcEAlphaInv;
const char* pSource_GLES30_FTexTGCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTG;
const char* pSource_GLES30_FATexTG = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGTexDensity;
const char* pSource_GLES30_FATexTGTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGMul;
const char* pSource_GLES30_FATexTGMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGInv;
const char* pSource_GLES30_FATexTGInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGEAlpha;
const char* pSource_GLES30_FATexTGEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGEAlphaTexDensity;
const char* pSource_GLES30_FATexTGEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGEAlphaMul;
const char* pSource_GLES30_FATexTGEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGEAlphaInv;
const char* pSource_GLES30_FATexTGEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VATexTGCxform;
const char* pSource_GLES30_VATexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxform;
const char* pSource_GLES30_FATexTGCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformMul;
const char* pSource_GLES30_FATexTGCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformInv;
const char* pSource_GLES30_FATexTGCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VATexTGCxformEAlpha;
const char* pSource_GLES30_VATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformEAlpha;
const char* pSource_GLES30_FATexTGCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformEAlphaMul;
const char* pSource_GLES30_FATexTGCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformEAlphaInv;
const char* pSource_GLES30_FATexTGCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VATexTGCxformAc;
const char* pSource_GLES30_VATexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAc;
const char* pSource_GLES30_FATexTGCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAcMul;
const char* pSource_GLES30_FATexTGCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAcInv;
const char* pSource_GLES30_FATexTGCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VATexTGCxformAcEAlpha;
const char* pSource_GLES30_VATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAcEAlpha;
const char* pSource_GLES30_FATexTGCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAcEAlphaMul;
const char* pSource_GLES30_FATexTGCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGCxformAcEAlphaInv;
const char* pSource_GLES30_FATexTGCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor      = texture(tex[int(0.0)], tc0);\n"
"fcolor.a    = texture(tex[int(1.0)], tc0).r;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertex;
const char* pSource_GLES30_VVertex = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertex;
const char* pSource_GLES30_FVertex = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexMul;
const char* pSource_GLES30_FVertexMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexInv;
const char* pSource_GLES30_FVertexInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertexEAlpha;
const char* pSource_GLES30_VVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexEAlpha;
const char* pSource_GLES30_FVertexEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexEAlphaMul;
const char* pSource_GLES30_FVertexEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexEAlphaInv;
const char* pSource_GLES30_FVertexEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertexCxform;
const char* pSource_GLES30_VVertexCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxform;
const char* pSource_GLES30_FVertexCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformMul;
const char* pSource_GLES30_FVertexCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformInv;
const char* pSource_GLES30_FVertexCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertexCxformEAlpha;
const char* pSource_GLES30_VVertexCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformEAlpha;
const char* pSource_GLES30_FVertexCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformEAlphaMul;
const char* pSource_GLES30_FVertexCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformEAlphaInv;
const char* pSource_GLES30_FVertexCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertexCxformAc;
const char* pSource_GLES30_VVertexCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAc;
const char* pSource_GLES30_FVertexCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAcMul;
const char* pSource_GLES30_FVertexCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAcInv;
const char* pSource_GLES30_FVertexCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VVertexCxformAcEAlpha;
const char* pSource_GLES30_VVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAcEAlpha;
const char* pSource_GLES30_FVertexCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAcEAlphaMul;
const char* pSource_GLES30_FVertexCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FVertexCxformAcEAlphaInv;
const char* pSource_GLES30_FVertexCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = color;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGTexTG;
const char* pSource_GLES30_VTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTG;
const char* pSource_GLES30_FTexTGTexTG = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGTexDensity;
const char* pSource_GLES30_FTexTGTexTGTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGMul;
const char* pSource_GLES30_FTexTGTexTGMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGInv;
const char* pSource_GLES30_FTexTGTexTGInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGEAlpha;
const char* pSource_GLES30_FTexTGTexTGEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGEAlphaTexDensity;
const char* pSource_GLES30_FTexTGTexTGEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGEAlphaMul;
const char* pSource_GLES30_FTexTGTexTGEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGEAlphaInv;
const char* pSource_GLES30_FTexTGTexTGEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGTexTGCxform;
const char* pSource_GLES30_VTexTGTexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxform;
const char* pSource_GLES30_FTexTGTexTGCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformMul;
const char* pSource_GLES30_FTexTGTexTGCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformInv;
const char* pSource_GLES30_FTexTGTexTGCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformEAlpha;
const char* pSource_GLES30_FTexTGTexTGCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformEAlphaMul;
const char* pSource_GLES30_FTexTGTexTGCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformEAlphaInv;
const char* pSource_GLES30_FTexTGTexTGCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGTexTGCxformAc;
const char* pSource_GLES30_VTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAc;
const char* pSource_GLES30_FTexTGTexTGCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAcMul;
const char* pSource_GLES30_FTexTGTexTGCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAcInv;
const char* pSource_GLES30_FTexTGTexTGCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAcEAlpha;
const char* pSource_GLES30_FTexTGTexTGCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAcEAlphaMul;
const char* pSource_GLES30_FTexTGTexTGCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGTexTGCxformAcEAlphaInv;
const char* pSource_GLES30_FTexTGTexTGCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"lowp vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTG;
const char* pSource_GLES30_FATexTGATexTG = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGTexDensity;
const char* pSource_GLES30_FATexTGATexTGTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGMul;
const char* pSource_GLES30_FATexTGATexTGMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGInv;
const char* pSource_GLES30_FATexTGATexTGInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGEAlpha;
const char* pSource_GLES30_FATexTGATexTGEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGEAlphaTexDensity;
const char* pSource_GLES30_FATexTGATexTGEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGEAlphaMul;
const char* pSource_GLES30_FATexTGATexTGEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGEAlphaInv;
const char* pSource_GLES30_FATexTGATexTGEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxform;
const char* pSource_GLES30_FATexTGATexTGCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformMul;
const char* pSource_GLES30_FATexTGATexTGCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformInv;
const char* pSource_GLES30_FATexTGATexTGCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformEAlpha;
const char* pSource_GLES30_FATexTGATexTGCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformEAlphaMul;
const char* pSource_GLES30_FATexTGATexTGCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformEAlphaInv;
const char* pSource_GLES30_FATexTGATexTGCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAc;
const char* pSource_GLES30_FATexTGATexTGCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAcMul;
const char* pSource_GLES30_FATexTGATexTGCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAcInv;
const char* pSource_GLES30_FATexTGATexTGCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAcEAlpha;
const char* pSource_GLES30_FATexTGATexTGCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAcEAlphaMul;
const char* pSource_GLES30_FATexTGATexTGCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGATexTGCxformAcEAlphaInv;
const char* pSource_GLES30_FATexTGATexTGCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"fcolor0.a = texture(tex[int(1.0)], tc0).r;\n"
"lowp vec4 fcolor1 = texture(tex[int(2.0)], tc1);\n"
"fcolor1.a = texture(tex[int(3.0)], tc1).r;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGVertex;
const char* pSource_GLES30_VTexTGVertex = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertex;
const char* pSource_GLES30_FTexTGVertex = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexTexDensity;
const char* pSource_GLES30_FTexTGVertexTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexMul;
const char* pSource_GLES30_FTexTGVertexMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexInv;
const char* pSource_GLES30_FTexTGVertexInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexEAlpha;
const char* pSource_GLES30_FTexTGVertexEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexEAlphaTexDensity;
const char* pSource_GLES30_FTexTGVertexEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexEAlphaMul;
const char* pSource_GLES30_FTexTGVertexEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexEAlphaInv;
const char* pSource_GLES30_FTexTGVertexEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGVertexCxform;
const char* pSource_GLES30_VTexTGVertexCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxform;
const char* pSource_GLES30_FTexTGVertexCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformMul;
const char* pSource_GLES30_FTexTGVertexCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformInv;
const char* pSource_GLES30_FTexTGVertexCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformEAlpha;
const char* pSource_GLES30_FTexTGVertexCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformEAlphaMul;
const char* pSource_GLES30_FTexTGVertexCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformEAlphaInv;
const char* pSource_GLES30_FTexTGVertexCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexTGVertexCxformAc;
const char* pSource_GLES30_VTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAc;
const char* pSource_GLES30_FTexTGVertexCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAcMul;
const char* pSource_GLES30_FTexTGVertexCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAcInv;
const char* pSource_GLES30_FTexTGVertexCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAcEAlpha;
const char* pSource_GLES30_FTexTGVertexCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES30_FTexTGVertexCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES30_FTexTGVertexCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex,tc0);\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertex;
const char* pSource_GLES30_FATexTGVertex = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexTexDensity;
const char* pSource_GLES30_FATexTGVertexTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexMul;
const char* pSource_GLES30_FATexTGVertexMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexInv;
const char* pSource_GLES30_FATexTGVertexInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexEAlpha;
const char* pSource_GLES30_FATexTGVertexEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexEAlphaTexDensity;
const char* pSource_GLES30_FATexTGVertexEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexEAlphaMul;
const char* pSource_GLES30_FATexTGVertexEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexEAlphaInv;
const char* pSource_GLES30_FATexTGVertexEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxform;
const char* pSource_GLES30_FATexTGVertexCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformMul;
const char* pSource_GLES30_FATexTGVertexCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformInv;
const char* pSource_GLES30_FATexTGVertexCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformEAlpha;
const char* pSource_GLES30_FATexTGVertexCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformEAlphaMul;
const char* pSource_GLES30_FATexTGVertexCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformEAlphaInv;
const char* pSource_GLES30_FATexTGVertexCxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAc;
const char* pSource_GLES30_FATexTGVertexCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAcMul;
const char* pSource_GLES30_FATexTGVertexCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAcInv;
const char* pSource_GLES30_FATexTGVertexCxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAcEAlpha;
const char* pSource_GLES30_FATexTGVertexCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAcEAlphaMul;
const char* pSource_GLES30_FATexTGVertexCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexTGVertexCxformAcEAlphaInv;
const char* pSource_GLES30_FATexTGVertexCxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in lowp vec4 color;\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 fcolor0 = texture(tex[int(0.0)],tc0);\n"
"fcolor0.a = texture(tex[int(1.0)],tc0).r;\n"
"lowp vec4 fcolor1 = color;\n"
"fcolor = mix(fcolor1, fcolor0, factor.r);\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTG;
const char* pSource_GLES30_VPosition3dTexTG = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGEAlpha;
const char* pSource_GLES30_VPosition3dTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGCxform;
const char* pSource_GLES30_VPosition3dTexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGCxformEAlpha;
const char* pSource_GLES30_VPosition3dTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGCxformAc;
const char* pSource_GLES30_VPosition3dTexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES30_VPosition3dTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dATexTGCxform;
const char* pSource_GLES30_VPosition3dATexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dATexTGCxformEAlpha;
const char* pSource_GLES30_VPosition3dATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dATexTGCxformAc;
const char* pSource_GLES30_VPosition3dATexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES30_VPosition3dATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertex;
const char* pSource_GLES30_VPosition3dVertex = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertexEAlpha;
const char* pSource_GLES30_VPosition3dVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertexCxform;
const char* pSource_GLES30_VPosition3dVertexCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertexCxformEAlpha;
const char* pSource_GLES30_VPosition3dVertexCxformEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertexCxformAc;
const char* pSource_GLES30_VPosition3dVertexCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES30_VPosition3dVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGTexTG;
const char* pSource_GLES30_VPosition3dTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGTexTGCxform;
const char* pSource_GLES30_VPosition3dTexTGTexTGCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES30_VPosition3dTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[4];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"tc1.x = dot(pos, texgen[int(2.0)]);\n"
"tc1.y = dot(pos, texgen[int(3.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGVertex;
const char* pSource_GLES30_VPosition3dTexTGVertex = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGVertexCxform;
const char* pSource_GLES30_VPosition3dTexTGVertexCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexTGVertexCxformAc;
const char* pSource_GLES30_VPosition3dTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"uniform vec4 texgen[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, texgen[int(0.0)]);\n"
"tc0.y = dot(pos, texgen[int(1.0)]);\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTG;
const char* pSource_GLES30_VBatchTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGEAlpha;
const char* pSource_GLES30_VBatchTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGCxform;
const char* pSource_GLES30_VBatchTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGCxformEAlpha;
const char* pSource_GLES30_VBatchTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGCxformAc;
const char* pSource_GLES30_VBatchTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGCxformAcEAlpha;
const char* pSource_GLES30_VBatchTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchATexTGCxform;
const char* pSource_GLES30_VBatchATexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchATexTGCxformEAlpha;
const char* pSource_GLES30_VBatchATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchATexTGCxformAc;
const char* pSource_GLES30_VBatchATexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchATexTGCxformAcEAlpha;
const char* pSource_GLES30_VBatchATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertex;
const char* pSource_GLES30_VBatchVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertexEAlpha;
const char* pSource_GLES30_VBatchVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertexCxform;
const char* pSource_GLES30_VBatchVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertexCxformEAlpha;
const char* pSource_GLES30_VBatchVertexCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertexCxformAc;
const char* pSource_GLES30_VBatchVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchVertexCxformAcEAlpha;
const char* pSource_GLES30_VBatchVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGTexTG;
const char* pSource_GLES30_VBatchTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGTexTGCxform;
const char* pSource_GLES30_VBatchTexTGTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGTexTGCxformAc;
const char* pSource_GLES30_VBatchTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGVertex;
const char* pSource_GLES30_VBatchTexTGVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGVertexCxform;
const char* pSource_GLES30_VBatchTexTGVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexTGVertexCxformAc;
const char* pSource_GLES30_VBatchTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTG;
const char* pSource_GLES30_VBatchPosition3dTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGEAlpha;
const char* pSource_GLES30_VBatchPosition3dTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGCxform;
const char* pSource_GLES30_VBatchPosition3dTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGCxformEAlpha;
const char* pSource_GLES30_VBatchPosition3dTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGCxformAc;
const char* pSource_GLES30_VBatchPosition3dTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES30_VBatchPosition3dTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dATexTGCxform;
const char* pSource_GLES30_VBatchPosition3dATexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dATexTGCxformEAlpha;
const char* pSource_GLES30_VBatchPosition3dATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dATexTGCxformAc;
const char* pSource_GLES30_VBatchPosition3dATexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES30_VBatchPosition3dATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertex;
const char* pSource_GLES30_VBatchPosition3dVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertexEAlpha;
const char* pSource_GLES30_VBatchPosition3dVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertexCxform;
const char* pSource_GLES30_VBatchPosition3dVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertexCxformEAlpha;
const char* pSource_GLES30_VBatchPosition3dVertexCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertexCxformAc;
const char* pSource_GLES30_VBatchPosition3dVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES30_VBatchPosition3dVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGTexTG;
const char* pSource_GLES30_VBatchPosition3dTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGTexTGCxform;
const char* pSource_GLES30_VBatchPosition3dTexTGTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[240];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES30_VBatchPosition3dTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[240];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGVertex;
const char* pSource_GLES30_VBatchPosition3dTexTGVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGVertexCxform;
const char* pSource_GLES30_VBatchPosition3dTexTGVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexTGVertexCxformAc;
const char* pSource_GLES30_VBatchPosition3dTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(afactor.b*255.01 * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(afactor.b*255.01 * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(afactor.b*255.01 * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTG;
const char* pSource_GLES30_VInstancedTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGEAlpha;
const char* pSource_GLES30_VInstancedTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGCxform;
const char* pSource_GLES30_VInstancedTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGCxformEAlpha;
const char* pSource_GLES30_VInstancedTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGCxformAc;
const char* pSource_GLES30_VInstancedTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGCxformAcEAlpha;
const char* pSource_GLES30_VInstancedTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedATexTGCxform;
const char* pSource_GLES30_VInstancedATexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedATexTGCxformEAlpha;
const char* pSource_GLES30_VInstancedATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedATexTGCxformAc;
const char* pSource_GLES30_VInstancedATexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedATexTGCxformAcEAlpha;
const char* pSource_GLES30_VInstancedATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertex;
const char* pSource_GLES30_VInstancedVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertexEAlpha;
const char* pSource_GLES30_VInstancedVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertexCxform;
const char* pSource_GLES30_VInstancedVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertexCxformEAlpha;
const char* pSource_GLES30_VInstancedVertexCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertexCxformAc;
const char* pSource_GLES30_VInstancedVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedVertexCxformAcEAlpha;
const char* pSource_GLES30_VInstancedVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGTexTG;
const char* pSource_GLES30_VInstancedTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGTexTGCxform;
const char* pSource_GLES30_VInstancedTexTGTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGTexTGCxformAc;
const char* pSource_GLES30_VInstancedTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGVertex;
const char* pSource_GLES30_VInstancedTexTGVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGVertexCxform;
const char* pSource_GLES30_VInstancedTexTGVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexTGVertexCxformAc;
const char* pSource_GLES30_VInstancedTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTG;
const char* pSource_GLES30_VInstancedPosition3dTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGEAlpha;
const char* pSource_GLES30_VInstancedPosition3dTexTGEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGCxform;
const char* pSource_GLES30_VInstancedPosition3dTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGCxformEAlpha;
const char* pSource_GLES30_VInstancedPosition3dTexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGCxformAc;
const char* pSource_GLES30_VInstancedPosition3dTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGCxformAcEAlpha;
const char* pSource_GLES30_VInstancedPosition3dTexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dATexTGCxform;
const char* pSource_GLES30_VInstancedPosition3dATexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dATexTGCxformEAlpha;
const char* pSource_GLES30_VInstancedPosition3dATexTGCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dATexTGCxformAc;
const char* pSource_GLES30_VInstancedPosition3dATexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dATexTGCxformAcEAlpha;
const char* pSource_GLES30_VInstancedPosition3dATexTGCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertex;
const char* pSource_GLES30_VInstancedPosition3dVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertexEAlpha;
const char* pSource_GLES30_VInstancedPosition3dVertexEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertexCxform;
const char* pSource_GLES30_VInstancedPosition3dVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertexCxformEAlpha;
const char* pSource_GLES30_VInstancedPosition3dVertexCxformEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertexCxformAc;
const char* pSource_GLES30_VInstancedPosition3dVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dVertexCxformAcEAlpha;
const char* pSource_GLES30_VInstancedPosition3dVertexCxformAcEAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGTexTG;
const char* pSource_GLES30_VInstancedPosition3dTexTGTexTG = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGTexTGCxform;
const char* pSource_GLES30_VInstancedPosition3dTexTGTexTGCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[240];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGTexTGCxformAc;
const char* pSource_GLES30_VInstancedPosition3dTexTGTexTGCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[240];\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 10.0 + 6.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 10.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 10.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGVertex;
const char* pSource_GLES30_VInstancedPosition3dTexTGVertex = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 4.0+ 0.1 + 1.0)]);\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGVertexCxform;
const char* pSource_GLES30_VInstancedPosition3dTexTGVertexCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexTGVertexCxformAc;
const char* pSource_GLES30_VInstancedPosition3dTexTGVertexCxformAc = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in lowp vec4 acolor;\n"
"in mediump vec4 afactor;\n"
"in vec4 pos;\n"
"out lowp vec4 color;\n"
"out mediump vec4 factor;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"color = acolor;\n"
"tc0.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 8.0 + 6.0+ 0.1 + 1.0)]);\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 8.0 + 1.0+ 0.1)];\n"
"factor = afactor;\n"
"}\n";

extern const char* pSource_GLES30_VSolid;
const char* pSource_GLES30_VSolid = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"in vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FSolid;
const char* pSource_GLES30_FSolid = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = cxmul;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSolidMul;
const char* pSource_GLES30_FSolidMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = cxmul;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSolidInv;
const char* pSource_GLES30_FSolidInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxmul;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = cxmul;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VText;
const char* pSource_GLES30_VText = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_FText;
const char* pSource_GLES30_FText = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"in lowp vec4 vcolor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTextTexDensity;
const char* pSource_GLES30_FTextTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex;\n"
"uniform vec2 textureDims;\n"
"in mediump vec2 tc0;\n"
"in lowp vec4 vcolor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FTextMul;
const char* pSource_GLES30_FTextMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"in lowp vec4 vcolor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTextInv;
const char* pSource_GLES30_FTextInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"in lowp vec4 vcolor;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp vec4 c = vcolor;\n"
"c.a = c.a * texture(tex, tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VTexUV;
const char* pSource_GLES30_VTexUV = 
"#version 300 es\n"
"uniform vec4 mvp[2];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VTexUVCxform;
const char* pSource_GLES30_VTexUVCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[2];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_FATexUV;
const char* pSource_GLES30_FATexUV = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexUVTexDensity;
const char* pSource_GLES30_FATexUVTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[2];\n"
"uniform vec2 textureDims;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FATexUVMul;
const char* pSource_GLES30_FATexUVMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexUVInv;
const char* pSource_GLES30_FATexUVInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexUVCxform;
const char* pSource_GLES30_FATexUVCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexUVCxformMul;
const char* pSource_GLES30_FATexUVCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FATexUVCxformInv;
const char* pSource_GLES30_FATexUVCxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex[int(0.0)],tc0);\n"
"fcolor.a = texture(tex[int(1.0)],tc0).r;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dSolid;
const char* pSource_GLES30_VPosition3dSolid = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"in vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dText;
const char* pSource_GLES30_VPosition3dText = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"vcolor = acolor * cxmul + cxadd;\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexUV;
const char* pSource_GLES30_VPosition3dTexUV = 
"#version 300 es\n"
"uniform vec4 mvp[4];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VPosition3dTexUVCxform;
const char* pSource_GLES30_VPosition3dTexUVCxform = 
"#version 300 es\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform vec4 mvp[4];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, mvp[int(0.0)]);\n"
"gl_Position.y = dot(pos, mvp[int(1.0)]);\n"
"gl_Position.z = dot(pos, mvp[int(2.0)]);\n"
"gl_Position.w = dot(pos, mvp[int(3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = cxadd;\n"
"fucxmul = cxmul;\n"
"}\n";

extern const char* pSource_GLES30_VBatchSolid;
const char* pSource_GLES30_VBatchSolid = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchText;
const char* pSource_GLES30_VBatchText = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexUV;
const char* pSource_GLES30_VBatchTexUV = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VBatchTexUVCxform;
const char* pSource_GLES30_VBatchTexUVCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dSolid;
const char* pSource_GLES30_VBatchPosition3dSolid = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dText;
const char* pSource_GLES30_VBatchPosition3dText = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)] + vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexUV;
const char* pSource_GLES30_VBatchPosition3dTexUV = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VBatchPosition3dTexUVCxform;
const char* pSource_GLES30_VBatchPosition3dTexUVCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedSolid;
const char* pSource_GLES30_VInstancedSolid = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in vec4 pos;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedText;
const char* pSource_GLES30_VInstancedText = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexUV;
const char* pSource_GLES30_VInstancedTexUV = 
"#version 300 es\n"
"uniform vec4 vfuniforms[48];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 2.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedTexUVCxform;
const char* pSource_GLES30_VInstancedTexUVCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 4.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dSolid;
const char* pSource_GLES30_VInstancedPosition3dSolid = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in vec4 pos;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dText;
const char* pSource_GLES30_VInstancedPosition3dText = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in lowp vec4 acolor;\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"out lowp vec4 vcolor;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"vcolor = acolor * vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)] + vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexUV;
const char* pSource_GLES30_VInstancedPosition3dTexUV = 
"#version 300 es\n"
"uniform vec4 vfuniforms[96];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 4.0 + 0.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"}\n";

extern const char* pSource_GLES30_VInstancedPosition3dTexUVCxform;
const char* pSource_GLES30_VInstancedPosition3dTexUVCxform = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in mediump vec2 atc;\n"
"in vec4 pos;\n"
"out lowp vec4 fucxadd;\n"
"out lowp vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"void main() {\n"
"gl_Position.x = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"gl_Position.z = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"gl_Position.w = dot(pos, vfuniforms[int(float(gl_InstanceID) * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc0 = atc;\n"
"fucxadd = vfuniforms[int(float(gl_InstanceID) * 6.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(float(gl_InstanceID) * 6.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_FYUV;
const char* pSource_GLES30_FYUV = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVTexDensity;
const char* pSource_GLES30_FYUVTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FYUVMul;
const char* pSource_GLES30_FYUVMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVEAlpha;
const char* pSource_GLES30_FYUVEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVEAlphaTexDensity;
const char* pSource_GLES30_FYUVEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[3];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FYUVEAlphaMul;
const char* pSource_GLES30_FYUVEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxform;
const char* pSource_GLES30_FYUVCxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformMul;
const char* pSource_GLES30_FYUVCxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformEAlpha;
const char* pSource_GLES30_FYUVCxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformEAlphaMul;
const char* pSource_GLES30_FYUVCxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformAc;
const char* pSource_GLES30_FYUVCxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformAcMul;
const char* pSource_GLES30_FYUVCxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformAcEAlpha;
const char* pSource_GLES30_FYUVCxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVCxformAcEAlphaMul;
const char* pSource_GLES30_FYUVCxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = 1.0;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVA;
const char* pSource_GLES30_FYUVA = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVATexDensity;
const char* pSource_GLES30_FYUVATexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FYUVAMul;
const char* pSource_GLES30_FYUVAMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVAInv;
const char* pSource_GLES30_FYUVAInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVAEAlpha;
const char* pSource_GLES30_FYUVAEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVAEAlphaTexDensity;
const char* pSource_GLES30_FYUVAEAlphaTexDensity = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform float mipLevels;\n"
"uniform sampler2D tex[4];\n"
"uniform vec2 textureDims;\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"vec2 dx = dFdx(tc0 * textureDims.x);\n"
"vec2 dy = dFdy(tc0 * textureDims.y);\n"
"float d  = max(dot(dx, dx), dot(dy, dy));\n"
"float mip = clamp(0.5 * log2(d) - 1.0, 0.0, mipLevels-1.0); // [int(0..mip-1.0)]\n"
"dx /= pow(2.0, mip);\n"
"dy /= pow(2.0, mip);\n"
"float H = clamp(1.0 - 0.5 * sqrt( max(dot(dx, dx), dot(dy, dy)) ), 0.0, 1.0) * (80.0/255.0);\n"
"float R = abs(H * 6.0 - 3.0) - 1.0;\n"
"float G = 2.0 - abs(H * 6.0 - 2.0);\n"
"float B = 2.0 - abs(H * 6.0 - 4.0);\n"
"// NOTE: must blend in a little bit of the original fcolor, otherwise the shader compiler might optimize the original block out,\n"
"// because it would no longer contribute to the outputs of the shader.\n"
"fcolor = fcolor*0.001 + clamp(vec4(R,G,B, 1.0), 0.0, 1.0);\n"
"}\n";

extern const char* pSource_GLES30_FYUVAEAlphaMul;
const char* pSource_GLES30_FYUVAEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVAEAlphaInv;
const char* pSource_GLES30_FYUVAEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxform;
const char* pSource_GLES30_FYUVACxform = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformMul;
const char* pSource_GLES30_FYUVACxformMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformInv;
const char* pSource_GLES30_FYUVACxformInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformEAlpha;
const char* pSource_GLES30_FYUVACxformEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformEAlphaMul;
const char* pSource_GLES30_FYUVACxformEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformEAlphaInv;
const char* pSource_GLES30_FYUVACxformEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = fcolor * fucxmul + fucxadd;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAc;
const char* pSource_GLES30_FYUVACxformAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAcMul;
const char* pSource_GLES30_FYUVACxformAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAcInv;
const char* pSource_GLES30_FYUVACxformAcInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAcEAlpha;
const char* pSource_GLES30_FYUVACxformAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAcEAlphaMul;
const char* pSource_GLES30_FYUVACxformAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FYUVACxformAcEAlphaInv;
const char* pSource_GLES30_FYUVACxformAcEAlphaInv = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[4];\n"
"in lowp vec4 factor;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"lowp float c0 = float((texture(tex[int(0.0)], tc0).a - 16./255.) * 1.164);\n"
"lowp float U0 = float(texture(tex[int(1.0)], tc0).a - 128./255.);\n"
"lowp float V0 = float(texture(tex[int(2.0)], tc0).a - 128./255.);\n"
"lowp vec4 c = vec4(c0,c0,c0,c0);\n"
"lowp vec4 U = vec4(U0,U0,U0,U0);\n"
"lowp vec4 V = vec4(V0,V0,V0,V0);\n"
"c += V * vec4(1.596, -0.813, 0.0, 0.0);\n"
"c += U * vec4(0.0, -0.392, 2.017, 0.0);\n"
"c.a = texture(tex[int(3.0)], tc0).a;\n"
"fcolor = c;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = vec3(fcolor.a, fcolor.a, fcolor.a);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCMatrixAc;
const char* pSource_GLES30_FTexTGCMatrixAc = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCMatrixAcMul;
const char* pSource_GLES30_FTexTGCMatrixAcMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCMatrixAcEAlpha;
const char* pSource_GLES30_FTexTGCMatrixAcEAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FTexTGCMatrixAcEAlphaMul;
const char* pSource_GLES30_FTexTGCMatrixAcEAlphaMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform mat4 cxmul;\n"
"uniform sampler2D tex;\n"
"in lowp vec4 factor;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor = texture(tex,tc0);\n"
"fcolor = (fcolor) * (cxmul) + cxadd * clamp(fcolor.a + cxadd.a, 0.0, 1.0);\n"
"fcolor.a *= factor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FBox1Blur;
const char* pSource_GLES30_FBox1Blur = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += textureLod(tex, tc0 + i * texscale.xy, 0.0);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FBox1BlurMul;
const char* pSource_GLES30_FBox1BlurMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{{\n"
"vec2 i = vec2(ix, ix);\n"
"color += textureLod(tex, tc0 + i * texscale.xy, 0.0);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FBox2Blur;
const char* pSource_GLES30_FBox2Blur = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + i * texscale.xy, 0.0);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FBox2BlurMul;
const char* pSource_GLES30_FBox2BlurMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + i * texscale.xy, 0.0);\n"
"}} // EndBox1/2.\n"
"fcolor = color * fsize.w;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorOuterBevel;
const char* pSource_GLES30_FSColorOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorOuterBevelMul;
const char* pSource_GLES30_FSColorOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorInnerShadow;
const char* pSource_GLES30_FSColorInnerShadow = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorInnerShadowMul;
const char* pSource_GLES30_FSColorInnerShadowMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorFullBevel;
const char* pSource_GLES30_FSColorFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorFullBevelMul;
const char* pSource_GLES30_FSColorFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseOuterBevel;
const char* pSource_GLES30_FSColorHideBaseOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseOuterBevelMul;
const char* pSource_GLES30_FSColorHideBaseOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseInnerShadow;
const char* pSource_GLES30_FSColorHideBaseInnerShadow = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseInnerShadowMul;
const char* pSource_GLES30_FSColorHideBaseInnerShadowMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"lowp float lerpval = clamp((base.a*fsize.z - fcolor.a), 0.0, 1.0);\n"
"lerpval *= shadowColor.a;\n"
"fcolor = mix(baseValue, shadowColor, lerpval) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseFullBevel;
const char* pSource_GLES30_FSColorHideBaseFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColorHideBaseFullBevelMul;
const char* pSource_GLES30_FSColorHideBaseFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = fcolor.a * fsize.z;\n"
"fcolor.r = 0.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradOuterBevel;
const char* pSource_GLES30_FSGradOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradOuterBevelMul;
const char* pSource_GLES30_FSGradOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradInnerBevel;
const char* pSource_GLES30_FSGradInnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradInnerBevelMul;
const char* pSource_GLES30_FSGradInnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradFullBevel;
const char* pSource_GLES30_FSGradFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradFullBevelMul;
const char* pSource_GLES30_FSGradFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseOuterBevel;
const char* pSource_GLES30_FSGradHideBaseOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseOuterBevelMul;
const char* pSource_GLES30_FSGradHideBaseOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseInnerBevel;
const char* pSource_GLES30_FSGradHideBaseInnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseInnerBevelMul;
const char* pSource_GLES30_FSGradHideBaseInnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseFullBevel;
const char* pSource_GLES30_FSGradHideBaseFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGradHideBaseFullBevelMul;
const char* pSource_GLES30_FSGradHideBaseFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0);\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = texture(gradtex, vec2(clamp(fcolor.a* fsize.z,0.0,1.0), 0.0));\n"
"lowp vec4 shadowColor2 = vec4(0.0,0,0.0,0);\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = 0.0;\n"
"shadowColor.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2OuterBevel;
const char* pSource_GLES30_FSColor2OuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2OuterBevelMul;
const char* pSource_GLES30_FSColor2OuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2InnerBevel;
const char* pSource_GLES30_FSColor2InnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2InnerBevelMul;
const char* pSource_GLES30_FSColor2InnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2FullBevel;
const char* pSource_GLES30_FSColor2FullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2FullBevelMul;
const char* pSource_GLES30_FSColor2FullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseOuterBevel;
const char* pSource_GLES30_FSColor2HideBaseOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseOuterBevelMul;
const char* pSource_GLES30_FSColor2HideBaseOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseInnerBevel;
const char* pSource_GLES30_FSColor2HideBaseInnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseInnerBevelMul;
const char* pSource_GLES30_FSColor2HideBaseInnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseFullBevel;
const char* pSource_GLES30_FSColor2HideBaseFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSColor2HideBaseFullBevelMul;
const char* pSource_GLES30_FSColor2HideBaseFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform vec4 offset;\n"
"uniform vec4 scolor;\n"
"uniform vec4 scolor2;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"lowp vec4 shadowColor = scolor;\n"
"lowp vec4 shadowColor2 = scolor2;\n"
"fcolor.ar = (1.0 - fcolor.ar * fsize.z) - (1.0 - fcolor.ra * fsize.z);\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2OuterBevel;
const char* pSource_GLES30_FSGrad2OuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2OuterBevelMul;
const char* pSource_GLES30_FSGrad2OuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2InnerBevel;
const char* pSource_GLES30_FSGrad2InnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2InnerBevelMul;
const char* pSource_GLES30_FSGrad2InnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2FullBevel;
const char* pSource_GLES30_FSGrad2FullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2FullBevelMul;
const char* pSource_GLES30_FSGrad2FullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = base;\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseOuterBevel;
const char* pSource_GLES30_FSGrad2HideBaseOuterBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseOuterBevelMul;
const char* pSource_GLES30_FSGrad2HideBaseOuterBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r)*(1.0-base.a) + baseValue;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseInnerBevel;
const char* pSource_GLES30_FSGrad2HideBaseInnerBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseInnerBevelMul;
const char* pSource_GLES30_FSGrad2HideBaseInnerBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r)) * base.a;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseFullBevel;
const char* pSource_GLES30_FSGrad2HideBaseFullBevel = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FSGrad2HideBaseFullBevelMul;
const char* pSource_GLES30_FSGrad2HideBaseFullBevelMul = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 fsize;\n"
"uniform sampler2D gradtex;\n"
"uniform vec4 offset;\n"
"uniform sampler2D srctex;\n"
"uniform vec4 srctexscale;\n"
"uniform sampler2D tex;\n"
"uniform vec4 texscale;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"fcolor       = vec4(0.0, 0.0, 0.0, 0.0);\n"
"vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n"
"for (float ix = -fsize.x; ix <= fsize.x; ix++)\n"
"{\n"
"for (float iy = -fsize.y; iy <= fsize.y; iy++)\n"
"{\n"
"vec2 i = vec2(ix,iy);\n"
"color.a += textureLod(tex, tc0 + (offset.xy + i) * texscale.xy, 0.0).a;\n"
"color.r += textureLod(tex, tc0 - (offset.xy + i) * texscale.xy, 0.0).a;\n"
"}\n"
"} // EndBox2.\n"
"fcolor = color * fsize.w;\n"
"fcolor.ar = (1.0 - fcolor.ar) - (1.0 - fcolor.ra);\n"
"lowp vec4 shadowColor = texture(gradtex,  vec2(clamp(0.0 + 0.5 * (1.0-fcolor.r * fsize.z) , 0.0, 0.5), 0.0));\n"
"lowp vec4 shadowColor2 = texture(gradtex, vec2(clamp(0.5 + 0.5 * fcolor.a * fsize.z, 0.5, 1.0), 0.0));\n"
"fcolor.a = shadowColor.a;\n"
"fcolor.r = shadowColor2.a;\n"
"shadowColor.a = 1.0;\n"
"shadowColor2.a = 1.0;\n"
"lowp vec4 base = textureLod(srctex, tc0 * srctexscale.xy, 0.0);\n"
"lowp vec4 baseValue = vec4(0.0,0,0.0,base.a*0.0001); // Blend a miniscule amount of base in, so it doesn't get compiled out.\n"
"vec2 alphas = vec2(shadowColor.a, shadowColor2.a);\n"
"fcolor.ar = clamp(fcolor.ar, 0.0, 1.0) * alphas;\n"
"fcolor = (shadowColor * fcolor.a + shadowColor2 * fcolor.r + baseValue * (1.0 - fcolor.a - fcolor.r));\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"fcolor.rgb = fcolor.rgb * fcolor.a;\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FDisplacementMap;
const char* pSource_GLES30_FDisplacementMap = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture(tex, tc1);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FDisplacementMapDMIgnore;
const char* pSource_GLES30_FDisplacementMapDMIgnore = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + texture(tex, tc0) * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_FDisplacementMapDMColor;
const char* pSource_GLES30_FDisplacementMapDMColor = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform vec4 boundColor;\n"
"uniform vec4 compx;\n"
"uniform vec4 compy;\n"
"uniform vec4 mapScale;\n"
"uniform sampler2D maptex;\n"
"uniform vec4 scale;\n"
"uniform sampler2D tex;\n"
"in mediump vec2 tc0;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec2 mapTC = tc0*mapScale.xy - mapScale.zw;\n"
"float mapInBoundsLowX  = step(mapTC.x, 0.0);\n"
"float mapInBoundsHighX = step(1.0, mapTC.x);\n"
"float mapInBoundsLowY  = step(mapTC.y, 0.0);\n"
"float mapInBoundsHighY = step(1.0, mapTC.y);\n"
"float mapInBounds = 1.0 - clamp(mapInBoundsLowX + mapInBoundsHighX + mapInBoundsLowY + mapInBoundsHighY, 0.0, 1.0);\n"
"vec4 mapOffset = texture(maptex,mapTC * scale.zw) * mapInBounds + vec4(0.5,0.5,0.5,0.5) * (1.0-mapInBounds);\n"
"vec2 tc1;\n"
"vec2 componentChannel;\n"
"componentChannel.x = dot(vec4(1.0,1,1.0,1), compx * mapOffset);\n"
"componentChannel.y = dot(vec4(1.0,1,1.0,1), compy * mapOffset);\n"
"tc1 = tc0 + (componentChannel - 0.5) * scale.xy;\n"
"fcolor = texture(tex, tc1);\n"
"float srcInBoundsLowX  = step(tc1.x, 0.0);\n"
"float srcInBoundsHighX = step(1.0, tc1.x);\n"
"float srcInBoundsLowY  = step(tc1.y, 0.0);\n"
"float srcInBoundsHighY = step(1.0, tc1.y);\n"
"float srcInBounds     = 1.0 - clamp(srcInBoundsLowX + srcInBoundsHighX + srcInBoundsLowY + srcInBoundsHighY, 0.0, 1.0);\n"
"fcolor = (fcolor * srcInBounds) + boundColor * (1.0-srcInBounds);\n"
"fcolor = fcolor;\n"
"}\n";

extern const char* pSource_GLES30_VDrawableCopyPixels;
const char* pSource_GLES30_VDrawableCopyPixels = 
"#version 300 es\n"
"uniform vec4 vfuniforms[144];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 6.0 + 2.0+ 0.1 + 3.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixels;
const char* pSource_GLES30_FDrawableCopyPixels = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixelsMergeAlpha;
const char* pSource_GLES30_FDrawableCopyPixelsMergeAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixelsNoDestAlpha;
const char* pSource_GLES30_FDrawableCopyPixelsNoDestAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"float inAlpha = fcolor_src.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_VDrawableCopyPixelsAlpha;
const char* pSource_GLES30_VDrawableCopyPixelsAlpha = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"out mediump vec2 tc2;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 3.0)]);\n"
"tc2.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 4.0)]);\n"
"tc2.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 5.0)]);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixelsAlpha;
const char* pSource_GLES30_FDrawableCopyPixelsAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"in vec2 tc2;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = inAlpha;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixelsAlphaMergeAlpha;
const char* pSource_GLES30_FDrawableCopyPixelsAlphaMergeAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"in vec2 tc2;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = mix(inAlpha, 1.0, fcolor_org.a);\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCopyPixelsAlphaNoDestAlpha;
const char* pSource_GLES30_FDrawableCopyPixelsAlphaNoDestAlpha = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[3];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"in vec2 tc2;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_org = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_src = texture(tex[int(1.0)], tc1);\n"
"vec4 fcolor_alp = texture(tex[int(2.0)], tc2);\n"
"float inAlpha = fcolor_src.a * fcolor_alp.a;\n"
"fcolor.a = 1.0;\n"
"fcolor.rgb = mix(fcolor_org.rgb, fcolor_src.rgb, inAlpha / fcolor.a);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableMerge;
const char* pSource_GLES30_FDrawableMerge = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform mat4 cxmul;\n"
"uniform mat4 cxmul1;\n"
"uniform sampler2D tex[2];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor_original = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor_source   = texture(tex[int(1.0)], tc1);\n"
"fcolor = (fcolor_original) * ( cxmul) + (fcolor_source) * ( cxmul1);\n"
"}\n";

extern const char* pSource_GLES30_FDrawableCompare;
const char* pSource_GLES30_FDrawableCompare = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D tex[2];\n"
"in vec2 tc0;\n"
"in vec2 tc1;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fcolor0 = texture(tex[int(0.0)], tc0);\n"
"vec4 fcolor1 = texture(tex[int(1.0)], tc1);\n"
"vec4 diff = fcolor0 - fcolor1;\n"
"vec4 oneValue = vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 1.0/255.0 );\n"
"vec4 ltZero = (sign(diff)+vec4(1.0,1,1.0,1))*-0.25;\n"
"vec4 partDiff = oneValue * (sign(ltZero)+vec4(1.0,1,1.0,1));\n"
"vec4 wrapDiff = fract(diff + vec4(1.0,1,1.0,1)) + partDiff;\n"
"float rgbdiff = sign(dot(wrapDiff.rgb, vec3(1.0,1,1.0)));\n"
"fcolor = mix( vec4(1.0,1,1.0, wrapDiff.a), vec4(wrapDiff.rgb, 1.0), rgbdiff );\n"
"}\n";

extern const char* pSource_GLES30_FDrawablePaletteMap;
const char* pSource_GLES30_FDrawablePaletteMap = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D srctex;\n"
"uniform sampler2D tex;\n"
"in vec2 tc0;\n"
"out vec4 fcolor;\n"
"void main() {\n"
"vec4 fchannels = texture(tex, tc0);\n"
"fcolor  = texture(srctex, vec2(fchannels.r, 0.125));\n"
"fcolor += texture(srctex, vec2(fchannels.g, 0.375));\n"
"fcolor += texture(srctex, vec2(fchannels.b, 0.625));\n"
"fcolor += texture(srctex, vec2(fchannels.a, 0.875));\n"
"}\n";

extern const char* pSource_GLES30_FBlendLighten;
const char* pSource_GLES30_FBlendLighten = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec4 src = texture(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture(dsttex, tc1);\n"
"fcolor     = max(src,dst) * src.a + (1.0-src.a)*dst;\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"}\n";

extern const char* pSource_GLES30_FBlendDarken;
const char* pSource_GLES30_FBlendDarken = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec4 src = texture(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture(dsttex, tc1);\n"
"vec3 clr = min(src.rgb, dst.rgb);\n"
"fcolor.rgb = clr * (dst.a) + (1.0-dst.a)*src.rgb + dst.rgb*(1.0-src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"}\n";

extern const char* pSource_GLES30_FBlendOverlay;
const char* pSource_GLES30_FBlendOverlay = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec4 src = texture(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (screen * select + mult * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"}\n";

extern const char* pSource_GLES30_FBlendHardlight;
const char* pSource_GLES30_FBlendHardlight = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec4 src = texture(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture(dsttex, tc1);\n"
"vec3 screen = 1.0 - 2.0*(1.0 - src.rgb)*(1.0 - dst.rgb);\n"
"vec3 mult = 2.0 * src.rgb * dst.rgb;\n"
"vec3 select = step(vec3(0.5, 0.5, 0.5), dst.rgb);\n"
"fcolor.rgb = (mult * select + screen * (vec3(1.0,1,1.0) - select)) * src.a + src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"}\n";

extern const char* pSource_GLES30_FBlendDifference;
const char* pSource_GLES30_FBlendDifference = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform lowp vec4 cxadd;\n"
"uniform lowp vec4 cxmul;\n"
"uniform sampler2D dsttex;\n"
"uniform sampler2D srctex;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"vec4 src = texture(srctex, tc0);\n"
"src = clamp(src * cxmul + cxadd, 0.0, 1.0);\n"
"vec4 dst = texture(dsttex, tc1);\n"
"fcolor     = max(src - dst, dst - src);\n"
"fcolor.a   = src.a + (1.0-src.a)*dst.a;\n"
"}\n";

extern const char* pSource_GLES30_VBlendLayer;
const char* pSource_GLES30_VBlendLayer = 
"#version 300 es\n"
"uniform vec4 vfuniforms[192];\n"
"in vec4 pos;\n"
"in float vbatch;\n"
"out vec4 fucxadd;\n"
"out vec4 fucxmul;\n"
"out mediump vec2 tc0;\n"
"out mediump vec2 tc1;\n"
"void main() {\n"
"gl_Position = vec4(0.0,0,0.0,1);\n"
"gl_Position.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 0.0)]);\n"
"gl_Position.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 2.0+ 0.1 + 1.0)]);\n"
"tc0.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 0.0)]);\n"
"tc0.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 1.0)]);\n"
"tc1.x = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 2.0)]);\n"
"tc1.y = dot(pos, vfuniforms[int(vbatch * 8.0 + 4.0+ 0.1 + 3.0)]);\n"
"fucxadd = vfuniforms[int(vbatch * 8.0 + 0.0+ 0.1)];\n"
"fucxmul = vfuniforms[int(vbatch * 8.0 + 1.0+ 0.1)];\n"
"}\n";

extern const char* pSource_GLES30_FBlendLayer;
const char* pSource_GLES30_FBlendLayer = 
"#version 300 es\n"
"precision mediump float;\n"
"uniform sampler2D alphatex;\n"
"uniform sampler2D srctex;\n"
"in vec4 fucxadd;\n"
"in vec4 fucxmul;\n"
"in mediump vec2 tc0;\n"
"in mediump vec2 tc1;\n"
"out lowp vec4 fcolor;\n"
"void main() {\n"
"float alp = texture(alphatex, tc1).a;\n"
"fcolor    = texture(srctex, tc0);\n"
"fcolor    *= alp;\n"
"fcolor = (fcolor * vec4(fucxmul.rgb,1.0)) * fucxmul.a;\n"
"fcolor += fucxadd * fcolor.a;\n"
"}\n";

}}}; // Scaleform::Render::GL


